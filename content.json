{"meta":{"title":"Yan's Blog","subtitle":"","description":"","author":"OVYVO","url":"https://ovyvo.github.io/yanblog.github.io","root":"/yanblog.github.io/"},"pages":[{"title":"书单","date":"2022-07-31T11:43:24.895Z","updated":"2022-07-31T11:43:24.895Z","comments":false,"path":"books/index.html","permalink":"https://ovyvo.github.io/yanblog.github.io/books/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-08-27T10:03:37.024Z","updated":"2022-08-27T10:03:37.024Z","comments":false,"path":"about/index.html","permalink":"https://ovyvo.github.io/yanblog.github.io/about/index.html","excerpt":"","text":"沪漂前端攻城狮 123456789101112131415161718192021&#123; name: &#x27;若拙&#x27; age: 26, gender: &#x27;男&#x27;, profession: &#x27;Web Developer&#x27;, experience: &#x27;3.5&#x27;, address: &#x27;上海市普陀区&#x27;, education: &#x27;本科&#x27;, github: &#x27;https://github.com/OVYVO&#x27;, email: &#x27;vue12306@163.com&#x27;, description: &#x27;大瓢贮月归春瓮，小杓分江入夜瓶&#x27;, skills: [ [&#x27;Html&#x27;, &#x27;JavaScript&#x27;, &#x27;TypeScript&#x27;, &#x27;ES6&#x27;], [&#x27;Vue&#x27;,&#x27;Nuxt&#x27;,&#x27;Taro&#x27;,&#x27;React&#x27;], [&#x27;AntDesign&#x27;, &#x27;Element&#x27;, &#x27;Vant&#x27;], [&#x27;Webpack&#x27;, &#x27;Gulp&#x27;, &#x27;Vite&#x27;], [&#x27;CSS&#x27;,&#x27;Less&#x27;,&#x27;Sass&#x27;], [&#x27;Git&#x27;,&#x27;Node&#x27;] ]&#125;"},{"title":"个人项目","date":"2022-07-31T11:43:24.895Z","updated":"2022-07-31T11:43:24.895Z","comments":false,"path":"repository/index.html","permalink":"https://ovyvo.github.io/yanblog.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-07-31T11:43:24.896Z","updated":"2022-07-31T11:43:24.896Z","comments":false,"path":"tags/index.html","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-07-31T11:43:24.895Z","updated":"2022-07-31T11:43:24.895Z","comments":false,"path":"categories/index.html","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2022-11-27T04:13:15.828Z","updated":"2022-11-27T04:13:15.828Z","comments":false,"path":"links/index.html","permalink":"https://ovyvo.github.io/yanblog.github.io/links/index.html","excerpt":"","text":""}],"posts":[{"title":"commitlint+husky+commitizen+lint-stage代码风格及上传规范管理","slug":"blog9","date":"2022-11-07T16:00:00.000Z","updated":"2022-11-27T04:13:15.827Z","comments":false,"path":"2022/11/08/blog9/","link":"","permalink":"https://ovyvo.github.io/yanblog.github.io/2022/11/08/blog9/","excerpt":"","text":"紧接上文说到vite+vue3代码风格及格式化操作，前文主要针对本地化配置格式化。为了更加规范仓库代码，本文引入介绍commitlint等工具，在代码commit的时候再次校验为代码规范再上一层保障。 安装commitlint及commitlint配置包1npm install @commitlint/cli @commitlint/config-conventional -D 添加@commitlint/config-conventional包的目的是使用基础配置，另外也可根据实际需要添加配置文件。例如：commitlint.config.js、.commitlintrc.js、.commitlintrc、.commitlintrc.json、.commitlintrc.yml或package.json中的commit配置 安装husky12345#使用下述命令会在根目录下自动生成.husky文件夹，并创建一个pre-commit钩子实例npx husky-init &amp;&amp; npm install # npmnpx husky-init &amp;&amp; yarn # Yarn 1yarn dlx husky-init --yarn2 &amp;&amp; yarn # Yarn 2+pnpm dlx husky-init &amp;&amp; pnpm install # pnpm 还可以使用如下方式安装husky： 1234npm install husky --save-dev #安装依赖npx --no-install husky install #创建.husky目录(使用--no-install的目的是让npx强制使用node_modules目录下的husky依赖包)npm pkg set scripts.prepare=&quot;husky install&quot; #在package.json中添加初始化命令(此步骤可以省略，但是如果是多人开发会很有必要，初始化仓库可以执行该命令)npx --no-instal husky add .husky/pre-commit &quot;npm run lint&quot; #快速创建pre-commit钩子 添加commit-msg hook（该hook会在commitlint未通过时提示相关信息） 1npx husky add .husky/commit-msg &#x27;npx --no -- commitlint --edit $&#123;1&#125;&#x27; 如何判断上述步骤是否成功可以使用简单的test命令测试 1npx commitlint --from HEAD~1 --to HEAD --verbose 执行commit之后如果出现类似的信息即可认为配置成功 12345678910git commit -m &quot;foo: this will fail&quot;husky &gt; commit-msg (node v10.1.0)No staged files match any of provided globs.⧗ input: foo: this will fail✖ type must be one of [build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test] [type-enum]✖ found 1 problems, 0 warningsⓘ Get help: https://github.com/conventional-changelog/commitlint/#what-is-commitlinthusky &gt; commit-msg hook failed (add --no-verify to bypass) 添加commitizencommitizen工具可以通过交互式撰写符合Commit Message规范的Commit Message 123npm install commitizen -D#oryarn add commitizen -D 执行如下命令生成符合Angular的Commit message格式提交规范（使用其他规范可以跳过此步骤） 1npx --no-install commitizen init cz-conventional-changelog --save-dev --save-exact !!!若使用上述命令，需要在package.json中配置一下commitizen适配器 123456789&#123; ... &quot;config&quot;: &#123; &quot;commitizen&quot;: &#123; &quot;path&quot;: &quot;./node_modules/cz-conventional-changelog&quot; &#125; &#125; ...&#125; 另外在package.json中的scripts中添加commit脚本替代git commit 123456...&quot;scripts&quot;: &#123; &quot;cz&quot;: &quot;git add . &amp;&amp; git-cz&quot;, &quot;prepare&quot;: &quot;husky install&quot; &#125;... 执行完上述操作就可以使用脚本提交代码 配置commitlint在根目录下新建文件.commitlintrc.js： 12345678910111213141516// 具体配置可参考https://commitlint.js.org/#/reference-rules自行配置不做详细说明module.exports = &#123; ignores: [(commit) =&gt; commit.includes(&#x27;init&#x27;)], extends: [&#x27;@commitlint/config-conventional&#x27;], rules: &#123; &#x27;header-max-length&#x27;: [2, &#x27;always&#x27;, 72], &#x27;scope-case&#x27;: [2, &#x27;always&#x27;, &#x27;lowerCase&#x27;], &#x27;subject-empty&#x27;: [2, &#x27;never&#x27;], &#x27;subject-case&#x27;: [2, &#x27;always&#x27;, [&#x27;lower-case&#x27;, &#x27;sentence-case&#x27;, &#x27;start-case&#x27;, &#x27;pascal-case&#x27;, &#x27;upper-case&#x27;]], &#x27;subject-full-stop&#x27;: [2, &#x27;never&#x27;, &#x27;.&#x27;], &#x27;type-empty&#x27;: [2, &#x27;never&#x27;], &#x27;type-case&#x27;: [2, &#x27;always&#x27;, &#x27;lowerCase&#x27;], &#x27;type-enum&#x27;: [2, &#x27;always&#x27;, [&#x27;feat&#x27;, &#x27;fix&#x27;, &#x27;docs&#x27;, &#x27;style&#x27;, &#x27;perf&#x27;, &#x27;chore&#x27;, &#x27;build&#x27;]] ] &#125;&#125; commitizen输出汉化安装commitlint-config-cz插件配置commit message 1234567npm install commitlint-config-cz -D #cz配置插件#oryarn add commitlint-config-cz -D #cz配置插件#andnpm install cz-customizable -D #cz适配器插件#oryarn add cz-customizable -D #cz适配器插件 在项目根目录下新建.cz-config.js文件 123456789101112131415161718// 配置文件可参考https://github.com/leoforfree/cz-customizable/blob/HEAD/cz-config-EXAMPLE.js自行配置不做详细说明module.exports = &#123; types: [ &#123; value: &#x27;:sparkles: feat&#x27;, name: &#x27;✨ feat: 一项新功能&#x27; &#125;, &#123; value: &#x27;:bug: fix&#x27;, name: &#x27;🐛 fix: 修复一个Bug&#x27; &#125;, &#123; value: &#x27;:memo: docs&#x27;, name: &#x27;📝 docs: 文档变更&#x27; &#125;, &#123; value: &#x27;:lipstick: style&#x27;, name: &#x27;💄 style: 代码风格，格式修复&#x27; &#125;, &#123; value: &#x27;:zap: perf&#x27;, name: &#x27;⚡️ perf: 代码优化,改善性能&#x27; &#125;, &#123; value: &#x27;:rocket: chore&#x27;, name: &#x27;🚀 chore: 变更构建流程或辅助工具&#x27; &#125;, &#123; value: &#x27;:package: build&#x27;, name: &#x27;📦️ build: 变更项目构建或外部依赖&#x27; &#125; ], messages: &#123; type: &#x27;请选择提交类型(必填):&#x27;, subject: &#x27;请简要描述提交(必填):&#x27;, confirmCommit: &#x27;确定提交此说明吗？&#x27; &#125;, skipQuestions: [&#x27;scope&#x27;, &#x27;body&#x27;, &#x27;breaking&#x27;, &#x27;footer&#x27;]&#125; 创建完.cz-config.js 返回package.json修改commitizen适配器选项1234567...&quot;config&quot;: &#123; &quot;commitizen&quot;: &#123; &quot;path&quot;: &quot;node_modules/cz-customizable&quot; &#125;&#125;,... 若之前使用Angular的Commit message格式提交规范，需修改.commitlintrc.js文件，节约空间可以卸载掉@commitlint/config-conventional插件（用不上了）12345module.exports = &#123; ... extends: [], ...&#125; 集成 gitmoji123npm install commitlint-config-gitmoji -D#oryarn add commitlint-config-gitmoji -D 修改.commitlintrc.js12345module.exports = &#123; ... extends: [&#x27;gitmoji&#x27;], ...&#125; 使用gitmoji的时候可能会遇到如下问题： 报错找不到gitmojis.json 两种解决方案：在node_modules/commitlint-plugin-gitmoji/lib下添加gitmojis.json 在根目录下添加gitmojis.json并修改.cz-config.js 12345678910111213 process.env.GITMOJI_PATH = &#x27;.gitmoji.json&#x27; modules.exports=&#123; ... &#125; ``` 2. 偶遇校验不通过需要严格按照上述事例配置.commitlintrc.js（列出来的rule勿改）### 安装lint-stage文件过滤器，每次只校验commit的文件```shellnpm install lint-staged -D#oryarn add lint-stage -D 修改.husky/pre-commit1234#!/usr/bin/env sh. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;npx lint-staged 修改package.json12345678910111213// 具体使用可参考lint-stage介绍：https://github.com/okonet/lint-staged#readme...&quot;lint-staged&quot;: &#123; &quot;*.&#123;js,jsx,ts,tsx&#125;&quot;: [ &quot;eslint --fix&quot;, //eslint校验 &quot;prettier --write&quot; //prettier格式化 ], &quot;*.vue&quot;: [ &quot;eslint --fix&quot;, &quot;prettier --write&quot; ]&#125;... 有关eslint及prettier的问题可以参见上篇文章。vite+vue3代码风格校验及格式化 以上就是本文全部内容，由于项目成本关系没有引入其他工具，像文件校验，commit-log自动添加，stylelint等，有兴趣的朋友可以自行尝试。 附录gitmojis.json文件地址","categories":[{"name":"工具","slug":"工具","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"代码规范","slug":"代码规范","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"}]},{"title":"prettier+eslint+commitlint项目实践","slug":"blog8","date":"2022-10-28T00:00:00.000Z","updated":"2022-11-27T04:13:15.827Z","comments":false,"path":"2022/10/28/blog8/","link":"","permalink":"https://ovyvo.github.io/yanblog.github.io/2022/10/28/blog8/","excerpt":"","text":"团队代码风格统一一直是博主想干又没有时间去干的事情，刚好借着新项目搭建，尝试一下使用Eslint及Prettier工具提升一下项目代码的整体质量。本文在配置方面仅做简单的配置，流程熟悉可以参考Eslint及Prettier官方文档定制自己喜欢的标准。 安装Eslint包1npm install eslint -D 初始化Eslint1npm init @eslint/config 执行命令后会出现以下选项：（可以按照图片配置，也可以后面直接更改.eslintrc.cjs文件）具体配置可以以自己项目为准，博主这里使用的是vite+vue3+js安装完成之后项目的根目录会出现.eslintrc.cjs文件 12345678910111213141516171819202122module.exports = &#123; &quot;env&quot;: &#123; &quot;browser&quot;: true, &quot;es2021&quot;: true, &quot;node&quot;: true &#125;, &quot;extends&quot;: [ &quot;eslint:recommended&quot;, &quot;plugin:vue/vue3-essential&quot; ], &quot;overrides&quot;: [ ], &quot;parserOptions&quot;: &#123; &quot;ecmaVersion&quot;: &quot;latest&quot;, &quot;sourceType&quot;: &quot;module&quot; &#125;, &quot;plugins&quot;: [ &quot;vue&quot; ], &quot;rules&quot;: &#123; &#125;&#125; 安装vite-plugin-eslint包12// 该包的作用是在vite运行时自动检测eslint规范，根据配置在终端显示未通过的校验代码npm install vite-plugin-eslint -D 安装eslint-parser 及 @babel/core 包123// 该包的作用是允许eslint在babel转换的源代码上运行npm install @babel/eslint-parser -Dnpm install @babel/core -D 安装prettier相关包123npm install prettier -Dnpm install eslint-config-prettier -D // eslint兼容的插件,将关闭eslint所有不必要或可能与Prettier冲突的规则npm install eslint-plugin-prettier -D // eslint的prettier,将Prettier作为ESLint规则运行，并将差异作为单个ESLint问题报告。 安装vue-eslint-parser包12// 用于`.vue`文件的ESLint自定义解析器。npm install vue-eslint-parser -D 配置.prettierrc12345678910111213// .prettierrc, 配置不做过多说明，具体可查阅相关文档&#123; &quot;printWidth&quot;: 120, &quot;tabWidth&quot;: 2, &quot;useTabs&quot;: false, &quot;semi&quot;: false, &quot;trailingComma&quot;: &quot;none&quot;, &quot;singleQuote&quot;: true, &quot;bracketSpacing&quot;: true, &quot;jsxBracketSameLine&quot;: false, &quot;endOfLine&quot;: &quot;auto&quot;, &quot;arrowParens&quot;: &quot;avoid&quot;&#125; 配置.eslintrc.cjs1234567891011121314151617181920212223242526272829303132333435363738module.exports = &#123; env: &#123; browser: true, es2021: true, node: true &#125;, extends: [ &#x27;eslint:recommended&#x27;, // eslint核心规则 &#x27;plugin:vue/vue3-essential&#x27;, // 继承eslint-plugin-vue组件中的基础配置 &#x27;plugin:prettier/recommended&#x27;, // 继承eslint-plugin-prettier组件中的基础配置 &#x27;eslint-config-prettier&#x27; // 处理配置兼容问题 ], parser: &#x27;vue-eslint-parser&#x27;, // 使用vue解析器 parserOptions: &#123; // 设置支持的JavaScript语言选项 ecmaVersion: &#x27;latest&#x27;, // 指定EcmaScript的版本 sourceType: &#x27;module&#x27;, // script/module ecmaFeatures: &#123; jsx: true &#125; &#125;, plugins:[ &#x27;vue&#x27;, // eslint-plugin-vue缩写 &#x27;prettier&#x27; // eslint-plugin-prettier缩写 ], globals: &#123; // 添加全局变量，防止no-undef 规则发出警告 defineProps: &#x27;readonly&#x27;, defineEmits: &#x27;readonly&#x27;, defineExpose: &#x27;readonly&#x27;, withDefaults: &#x27;readonly&#x27; &#125;, rules: &#123; &#x27;no-console&#x27;: &#x27;warn&#x27;, &#x27;vue/multi-word-component-names&#x27;: &#x27;off&#x27; // extends中继承过来的属性，可以重新修改 ... &#125;&#125; VSCode配置安装ESLint及Prettier插件 打开VSCode设置&gt;用户&gt;文本编辑器&gt;格式化&gt;勾选Format On Save 2. 搜索Prettier&gt;勾选Require Config3.打开VSCode设置&gt;用户&gt;文本编辑器&gt;Default Formatter&gt;选择Prettier - Code formatter4.ctr+shift+p打开首选项配置settings.json&gt;添加eslint vue支持 1234567...&quot;eslint.validate&quot;: [ &quot;javascript&quot;, &quot;javascriptreact&quot;, &quot;vue&quot; ],... 特别提醒：每次修改完Eslint及Prettier配置最好重新启动VSCode，防止出现配置不生效的情况","categories":[{"name":"工具","slug":"工具","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"代码规范","slug":"代码规范","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"}]},{"title":"Element组件MessageBox剖析","slug":"blog7","date":"2022-10-10T00:00:00.000Z","updated":"2022-10-10T11:00:56.172Z","comments":false,"path":"2022/10/10/blog7/","link":"","permalink":"https://ovyvo.github.io/yanblog.github.io/2022/10/10/blog7/","excerpt":"","text":"因最近业务需求需要实现类似于Element中的MessageBox组件的效果，所以尝试封装了一个类似的小组件，本文不介绍封装，因为受到MessageBox的启发，所以通过源码注释的方式详细剖析一下Element的MessageBox实现思想。 基础知识Vue.extend(options) 参数：{Object} options 用法：使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。需要注意的是：data 选项是特例，需要注意 - 在 Vue.extend() 中它必须是函数 1&lt;div id=&quot;mount-point&quot;&gt;&lt;/div&gt; 12345678910111213// 创建构造器var Profile = Vue.extend(&#123; template: &#x27;&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;&#x27;, data: function () &#123; return &#123; firstName: &#x27;Walter&#x27;, lastName: &#x27;White&#x27;, alias: &#x27;Heisenberg&#x27; &#125; &#125;&#125;)// 创建 Profile 实例，并挂载到一个元素上。new Profile().$mount(&#x27;#mount-point&#x27;) 结果： 1&lt;p&gt;Walter White aka Heisenberg&lt;/p&gt; 为什么要介绍Vue.extend(options)，因为Element中MessageBox的使用方式为函数式调用 （this.$confirm()）的形式，以这种形式调用组件就不能按照常规的组件引入注册的形式去调用，可以通过Vue.extend(options)创建一个vue子类再通过函数暴露出去的方式实现函数式调用。 Element MessageBox 源码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174// main.js 仅介绍主要部分代码...import Vue from &#x27;vue&#x27;;// 引入模板文件import msgboxVue from &#x27;./main.vue&#x27;; // element合并对象的工具函数，代码比较简单可以自行查阅import merge from &#x27;element-ui/src/utils/merge&#x27;; import &#123; isVNode &#125; from &#x27;element-ui/src/utils/vdom&#x27;;// 创建一个新的vue构造器，构造器可以手动挂载到一个新的Dom上const MessageBoxConstructor = Vue.extend(msgboxVue);let currentMsg, instance;let msgQueue = [];// 创建一个新的vue子实例const initInstance = () =&gt; &#123; instance = new MessageBoxConstructor(&#123; el: document.createElement(&#x27;div&#x27;) &#125;); // 给实例添加callback对象，后面会分析到 instance.callback = defaultCallback;&#125;;// defaultCallback处理了两种形式的回调方式// 1.可以手动传入一个callback函数// 2.使用默认的promise方式const defaultCallback = action =&gt; &#123; if (currentMsg) &#123; let callback = currentMsg.callback; // 处理传入回调函数情况 if (typeof callback === &#x27;function&#x27;) &#123; // showInput区分是否为输入框MessageBox if (instance.showInput) &#123; callback(instance.inputValue, action); &#125; else &#123; callback(action, instance); &#125; &#125; // 处理promise情况 if (currentMsg.resolve) &#123; if (action === &#x27;confirm&#x27;) &#123; if (instance.showInput) &#123; currentMsg.resolve(&#123; value: instance.inputValue, action &#125;); &#125; else &#123; currentMsg.resolve(action); &#125; &#125; else if (currentMsg.reject &amp;&amp; (action === &#x27;cancel&#x27; || action === &#x27;close&#x27;)) &#123; currentMsg.reject(action); &#125; &#125; &#125;&#125;;const showNextMsg = () =&gt; &#123; if (!instance) &#123; initInstance(); &#125; instance.action = &#x27;&#x27;; if (!instance.visible || instance.closeTimer) &#123; if (msgQueue.length &gt; 0) &#123; // 顺序执行msgQueue中的currentMsg currentMsg = msgQueue.shift(); // currentMsg内容如下: // &#123; // options: merge(&#123;&#125;, defaults, MessageBox.defaults, options), // callback: callback, // resolve: resolve, // reject: reject // &#125; let options = currentMsg.options; // 将参数挂载到新创建的实例data上 for (let prop in options) &#123; if (options.hasOwnProperty(prop)) &#123; // 实例参数修改 instance[prop] = options[prop]; &#125; &#125; // 如果options没传入callback将默认的callback赋值给实例的callback if (options.callback === undefined) &#123; // 当options里面有callback传入，正常输出。 // 当options里面没有callback,instance.callback使用defaultCallback instance.callback = defaultCallback; &#125; // 再次封装callback let oldCb = instance.callback; instance.callback = (action, instance) =&gt; &#123; oldCb(action, instance); showNextMsg(); &#125;; // 判断message是否传入的是Html片段,如果是Html片段添加到slot if (isVNode(instance.message)) &#123; instance.$slots.default = [instance.message]; instance.message = null; &#125; else &#123; delete instance.$slots.default; &#125; // 将某些特定的参数设定初始值 [&#x27;modal&#x27;, &#x27;showClose&#x27;, &#x27;closeOnClickModal&#x27;, &#x27;closeOnPressEscape&#x27;, &#x27;closeOnHashChange&#x27;].forEach(prop =&gt; &#123; if (instance[prop] === undefined) &#123; instance[prop] = true; &#125; &#125;); // 注意message是挂载到body上 document.body.appendChild(instance.$el); // 控制弹窗出现 Vue.nextTick(() =&gt; &#123; instance.visible = true; &#125;); &#125; &#125;&#125;;const MessageBox = function(options, callback) &#123; if (Vue.prototype.$isServer) return; if (typeof options === &#x27;string&#x27; || isVNode(options)) &#123; // 当options参数为字符串 this.$msgbox(&#x27;xxx&#x27;)情况下默认设置message字段 options = &#123; message: options &#125;; // 若有两个及以上参数判断第二个参数是否为字符串赋值给title if (typeof arguments[1] === &#x27;string&#x27;) &#123; options.title = arguments[1]; &#125; &#125; else if (options.callback &amp;&amp; !callback) &#123; // 参数为对象且对象有callback字段时 将callback赋值给callback callback = options.callback; &#125; // 兼容不支持Promise情况 if (typeof Promise !== &#x27;undefined&#x27;) &#123; return new Promise((resolve, reject) =&gt; &#123; // eslint-disable-line msgQueue.push(&#123; options: merge(&#123;&#125;, defaults, MessageBox.defaults, options), callback: callback, resolve: resolve, reject: reject &#125;); showNextMsg(); &#125;); &#125; else &#123; msgQueue.push(&#123; options: merge(&#123;&#125;, defaults, MessageBox.defaults, options), callback: callback &#125;); showNextMsg(); &#125;&#125;; // 使用方式1: // this.$msgbox(&#123;title:&#x27;测试&#x27;,message:&#x27;测试&#x27;,callback:(action,instance)=&gt;&#123; // console.log(action) //confirm // console.log(instance) //vue实例 // &#125;&#125;) // 使用方式2: // this.$msgbox(&#123;title:&#x27;测试&#x27;,message:&#x27;测试&#x27;&#125;,(action,instance)=&gt;&#123; // console.log(action) //confirm // console.log(instance) //undefined // &#125;)...// 暴露MessageBox方法export default MessageBox;export &#123; MessageBox &#125;; 可以看出Message组件主要的两个方法一个是MessageBox，一个是showNextMsg，这两个方法的主要功能一个是添加新的message对象一个是设置实例参数，除了callback的理解有些复杂外其他的代码理解应该不难。至于main.vue文件就是普通的vue文件不再赘述。 简单实现MessageBox组件源码","categories":[{"name":"组件","slug":"组件","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/%E7%BB%84%E4%BB%B6/"}],"tags":[{"name":"Element","slug":"Element","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/Element/"}]},{"title":"Linux常见命令总结","slug":"blog6","date":"2022-08-26T16:00:00.000Z","updated":"2022-08-27T09:43:39.955Z","comments":false,"path":"2022/08/27/blog6/","link":"","permalink":"https://ovyvo.github.io/yanblog.github.io/2022/08/27/blog6/","excerpt":"","text":"总结一下常见Linux操作命令，以备不时之需 目录与文件相关1234567891011pwd //显示当前工作目录mkdir &#x27;dir&#x27; //创建工作目录rmdir &#x27;dir&#x27; //删除工作目录cd &#x27;dir&#x27; //进入文件夹cd .. //返回上层目录touch &#x27;file&#x27; //创建文件rm -rf &#x27;file/dir&#x27; //删除文件或目录ls //列出所有文件和目录ls -a //查看所有文件(包括隐藏文件)ls -l //详细显示ls -m //逗号分隔显示 文件内容显示12cat &gt; &#x27;file&#x27; //创建文件并编辑内容（ctr+D结束编辑）cat -n &#x27;file&#x27; //查看文件 vi编辑器12345vi [path/file] //打开编辑器i //进入编辑模式esc //进入命令模式:wq //保存并推出:q! //退出不保存 其他命令1234clear //清除屏幕信息date //显示当前日期ps //查看所有进程last //显示最近登陆系统用户信息","categories":[{"name":"工具","slug":"工具","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"Linux","slug":"Linux","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/Linux/"}]},{"title":"H5在IOS微信webview中无法校验视频时长问题","slug":"blog5","date":"2022-07-30T16:00:00.000Z","updated":"2022-07-31T11:56:48.542Z","comments":false,"path":"2022/07/31/blog5/","link":"","permalink":"https://ovyvo.github.io/yanblog.github.io/2022/07/31/blog5/","excerpt":"","text":"因业务需求需要一个图片视频文件上传功能，需支持主流浏览器及微信钉钉内置浏览器，遂考虑用一个简单的H5页面做上传客户端。视频上传因为要控制视频长度，在其他浏览器中都校验通过，但是在微信中却出了问题 123456789101112131415161718192021222324const beforeRead = (file)=&gt; &#123; return new Promise((resolve,reject)=&gt;&#123; if(props.type == &#x27;video&#x27;)&#123; let url = URL.createObjectURL(file) let audioElement = new Audio(url) audioElement.addEventListener(&quot;loadedmetadata&quot;, ()=&gt;&#123; let audioDuration = audioElement.duration; if(audioDuration&gt;60)&#123; Toast(`仅支持上传1分钟时长以内视频`) reject() &#125;else&#123; resolve(file) &#125; &#125;) &#125;else&#123; if (![&#x27;image/jpeg&#x27;,&#x27;image/png&#x27;].includes(file.type)) &#123; Toast(&#x27;所选文件格式不支持&#x27;); reject() &#125;else&#123; resolve(file) &#125; &#125; &#125;) &#125; 问题原因：IOS微信浏览器需要播放视频才能通过监听loadedmetadata事件获取视频长度，以下是解决办法： 12345678910111213141516171819202122232425262728const beforeRead = (file)=&gt; &#123; return new Promise((resolve,reject)=&gt;&#123; if(props.type == &#x27;video&#x27;)&#123; let url = URL.createObjectURL(file) let audioElement = new Audio(url) audioElement.muted = true audioElement.play().then(()=&gt;audioElement.pause()) audioElement.addEventListener(&quot;loadedmetadata&quot;, ()=&gt;&#123; let audioDuration = audioElement.duration; if(audioDuration&gt;60)&#123; audioElement.muted = false Toast(`仅支持上传1分钟时长以内视频`) reject() &#125;else&#123; audioElement.muted = false resolve(file) &#125; &#125;) &#125;else&#123; if (![&#x27;image/jpeg&#x27;,&#x27;image/png&#x27;].includes(file.type)) &#123; Toast(&#x27;所选文件格式不支持&#x27;); reject() &#125;else&#123; resolve(file) &#125; &#125; &#125;) &#125; H5页面vue3.0+vant，参见upload组件不再赘述！","categories":[{"name":"vue","slug":"vue","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/vue/"}],"tags":[{"name":"vue-3","slug":"vue-3","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/vue-3/"}]},{"title":"Taro小程序添加Echarts代码包过大解决办法","slug":"blog4","date":"2021-10-19T00:00:00.000Z","updated":"2022-10-10T11:00:56.172Z","comments":false,"path":"2021/10/19/blog4/","link":"","permalink":"https://ovyvo.github.io/yanblog.github.io/2021/10/19/blog4/","excerpt":"","text":"上回书说到如何在Taro小程序中引入Echarts图表。如果小程序主包代码体量不多可以直接使用，但是如果小程序代码体量大，稍不留神就会导致主包代码超过2M，无法预览也无法真机调试。本文着重介绍一下Taro引入Echarts分包操作以及注意事项。 前文链接，完整流程可以自行查阅 taro小程序添加Echarts实践分包操作： 将与echarts组件相关都移到分包中，结构目录如下 配置app.config.js 12345678910...subpackages: [ &#123; root: &quot;subpages&quot;, pages: [ &#x27;test/index&#x27; ] &#125; ],... 配置config/index 导致包文件过大的“罪魁祸首”就是ec-canvas文件夹下的echarts.js文件。所以我们需要解决的问题是，分包使用Echarts组件不能将echarts.js打包到主包的common.js里面。Taro机制认为一个js文件被多个模块依赖会将该js抽离到common.js。虽然我们关于Echarts相关的文件都放在subpages里面，但是如果引用多次还是会抽离到主包common.js。所以我们需要使用splitChunks将Echarts部分单独打包，然后使用addChunkPages 往页面注入依赖。 12345678910111213141516171819202122232425262728293031// config/index.jsmini: &#123; compile: &#123; exclude: [ // 跳过编译 path.resolve(__dirname, &#x27;..&#x27;, &#x27;src/subpages/components/ec-canvas/echarts.js&#x27;) ] &#125;, addChunkPages (pages) &#123; pages.set(&#x27;subpages/test/index&#x27;, [&#x27;subpages/common&#x27;]) &#125;, webpackChain (chain) &#123; chain.merge(&#123; optimization: &#123; splitChunks: &#123; cacheGroups: &#123; subpackagesCommon: &#123; name: &#x27;subpages/common&#x27;, minChunks: 2, test: (module,chunks) =&gt; &#123; const isNoOnlySubpackRequired = chunks.find(chunk =&gt; !(/\\bsubpages\\b/.test(chunk.name))) return !isNoOnlySubpackRequired &#125;, priority: 200 &#125; &#125; &#125; &#125; &#125;) &#125; &#125; 至此可以看到打包效果： 页面引用参考前文页面使用。此时如果我们运行代码，可能会发现一个问题：注意这个错误！提示找不到ec-canvas组件。注意编译后的组件ec-canvas.js因为之前抽离了echarts.js，现在已经无法引入，所以需要在编译后的文件中引入subpages里面的common.js。 添加引入plugin(代码很简单，可以先学习一下官方文档如何编写一个插件) 123456789101112131415161718/* eslint-disable import/no-commonjs *//* 解决chunk包没有引用资源的问题**/const fs = require(&#x27;fs&#x27;);const path = require(&quot;path&quot;);module.exports.default = module.exports = (ctx, options) =&gt; &#123; ctx.onBuildFinish(() =&gt; &#123; const chunkRequireArray = options.chunkRequireArray for(let i in chunkRequireArray)&#123; const unitData = chunkRequireArray[i]; const target = path.join(ctx.paths.outputPath, unitData.fileDistPath); const data = fs.readFileSync(target, &#x27;utf8&#x27;); fs.writeFileSync(target, `$&#123;unitData.prependContent&#125;;$&#123;data&#125;`) &#125; &#125;)&#125; 配置config/index.js 12345678910111213plugins: [ [ path.resolve(__dirname, &#x27;..&#x27;, &#x27;plugin/chunkCacheRequirePlugin&#x27;), &#123; chunkRequireArray:[ //可配置多个目标引入文件 &#123; fileDistPath: &#x27;subpages/components/ec-canvas/ec-canvas.js&#x27;, prependContent: &#x27;require(&quot;../../common&quot;);&#x27; &#125; ] &#125; ] ], 重新编译就可以了：","categories":[{"name":"taro","slug":"taro","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/taro/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"Taro小程序引入Echarts教程","slug":"blog3","date":"2021-10-18T00:00:00.000Z","updated":"2022-07-31T11:43:24.895Z","comments":false,"path":"2021/10/18/blog3/","link":"","permalink":"https://ovyvo.github.io/yanblog.github.io/2021/10/18/blog3/","excerpt":"","text":"小程序需要添加简单的数据统计功能。因为对Echats比较熟悉，所以想将Echats引入到项目中，有几点注意事项，记录一下。 taro版本：3.3.2（注意一下版本信息）,官方物料仓库里面的Echarts大多不兼容最新版本taro框架，但是实现的思路都是一样的。大致说一下： 准备工作 下载Echarts官方的小程序插件echarts-for-weixin 传送门 将项目中的ec-canvas文件夹复制保存 去Echarts官网定制图表(不建议全部下载，文件太大，小程序体积大需要分包) 传送门 压缩echarts.js文件(压缩方法可以自行找线上压缩网站或自行压缩，方法附后文） 替换ec-canvas文件中的echarts.js文件 本地压缩方法 12npm install uglify-js -guglifyjs echarts.js -m -o echarts.min.js //注意：替换ec-canvas里面的文件时将echarts.min.js换回来 小程序封装图表组件(以柱状图为例)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465// 柱状图import &#123; Component &#125; from &quot;react&quot;;import &#123; View &#125; from &quot;@tarojs/components&quot;;import &#123; getCurrentInstance &#125; from &quot;@tarojs/taro&quot; //Taro3.x需要使用getCurrentInstance 获取页面DOMimport &#x27;./index.scss&#x27;function setChartData(chart)&#123; const defautOption = &#123; xAxis: &#123; type: &quot;category&quot;, data: [&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;], &#125;, yAxis: &#123; type: &quot;value&quot;, &#125;, series: [ &#123; data: [120, 200, 150, 80, 70, 110, 130], type: &quot;bar&quot;, showBackground: true, backgroundStyle: &#123; color: &quot;rgba(220, 220, 220, 0.8)&quot;, &#125;, &#125;, ], &#125;; chart.setOption(defautOption);&#125;export default class BarChart extends Component &#123; constructor(props) &#123; super(props) this.state = &#123; ec: &#123; lazyLoad: true &#125; &#125; &#125; componentDidMount() &#123; &#125; refresh(data) &#123; getCurrentInstance().page.selectComponent(&#x27;#mychart-area&#x27;).init((canvas, width, height) =&gt; &#123; const chart = echarts.init(canvas, null, &#123; width: width, height: height &#125;); setChartData(chart, data); return chart; &#125;); &#125; render() &#123; return ( &lt;View className=&#x27;bar-chart&#x27;&gt; &lt;ec-canvas id=&#x27;mychart-area&#x27; canvasId=&#x27;mychart-area&#x27; ec=&#123;this.state.ec&#125; /&gt; &lt;/View&gt; ); &#125;&#125; 页面使用1234567891011121314151617181920212223242526272829303132333435363738import React, &#123; Component &#125; from &#x27;react&#x27;import &#123; View &#125; from &#x27;@tarojs/components&#x27;import BarChart from &#x27;@/components/barChart&#x27;import &#x27;./index.scss&#x27;export default class Index extends Component &#123; constructor (props) &#123; super(props) this.barChart = React.createRef() this.state = &#123; &#125; &#125; componentWillMount () &#123; &#125; componentDidMount () &#123; // 延迟调用，确保 ec-canvas 节点已存在 setTimeout(() =&gt; &#123; this.barChart.current.refresh() &#125;, 100) &#125; componentWillUnmount () &#123; &#125; componentDidShow () &#123; &#125; componentDidHide () &#123; &#125; render () &#123; return ( &lt;View className=&#x27;selfstudy-container&#x27;&gt; &lt;BarChart ref=&#123;this.barChart&#125; /&gt; &lt;/View&gt; ) &#125;&#125; ——————————————————至此图表引入已完成90%————————————————————-直接页面使用的话会报两个错误： echarts is not defined。（没有拿到ec-canvas页面实例） 解决方法：在 app 或页面配置文件中配置 usingComponents 属性。 12345678export default &#123; usingComponents: &#123; // 定义需要引入的第三方组件 // 1. key 值指定第三方组件名字，以小写开头 // 2. value 值指定第三方组件 js 文件的相对路径 &#x27;ec-canvas&#x27;: &#x27;../../components/ec-canvas/ec-canvas&#x27; &#125;&#125; 注意：Taro3 的组件是没有配置文件的，因此 usingComponents 必须配置在“页面”的配置文件中。2. t.addEventListener is not a function 解决方法：在 ec-canvas文件夹下面的wx-canvas.js文件添加代码： 123456789101112131415161718192021222324252627export default class WxCanvas &#123; constructor(ctx, canvasId, isNew, canvasNode) &#123; this.ctx = ctx; this.canvasId = canvasId; this.chart = null; this.isNew = isNew if (isNew) &#123; this.canvasNode = canvasNode; &#125; else &#123; this._initStyle(ctx); &#125; // this._initCanvas(zrender, ctx); this._initEvent(); &#125; // 新增空函数，修复调用 echarts.init 时报错 addEventListener () &#123;&#125; getContext(contextType) &#123; if (contextType === &#x27;2d&#x27;) &#123; return this.ctx; &#125; &#125;&#125;","categories":[{"name":"taro","slug":"taro","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/taro/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"Taro小程序分享","slug":"blog2","date":"2020-04-03T00:00:00.000Z","updated":"2022-07-31T11:43:24.894Z","comments":false,"path":"2020/04/03/blog2/","link":"","permalink":"https://ovyvo.github.io/yanblog.github.io/2020/04/03/blog2/","excerpt":"","text":"在开发小程序的时候遇到自定义分享按钮分享卡片到好友的需求，由于小程序的分享只有在页面 js 中定义了 onShareAppMessage(Object)方法才会出现右上角的分享按钮,所以需要在页面中自定义分享方法。具体见下： object 参数 onShareAppMessage(Object)事件需要返回一个 Object 对象对象里面包含要分享的标题，转发的路径，以及自定义图片的路径。完成了这一系列操作就可以愉快的去分享微信小程序的页面了。 1234567891011121314151617// 在页面中使用import Taro, &#123; Component &#125; from &quot;@tarojs/taro&quot;;import &#123; View &#125; from &quot;@tarojs/components&quot;;class index extends Component &#123; onShareAppMessage() &#123; return &#123; title: &quot;自定义标题&quot;, path: &quot;/page/user?id=123&quot;, // 自定义的分享路径，点击分享的卡片之后会跳转这里定义的路由 imageUrl: &quot;&quot;, // 图片路径 &#125;; &#125; render() &#123; return &lt;View&gt;微信分享&lt;/View&gt;; &#125;&#125;export default index; 自定义分享按钮事件的实现。有时候，在大多数的业务场景下我们需要在页面中点击某个按钮触发分享的事件，此时需要监听用户点击页面内转发按钮（Button 组件 openType=’share’）就会自动触发 onShareAppMessage 方法。如果需要在 button 中携带信息，需要自定义 button 属性，通过 res.target.dataset 获取。 1234567891011121314151617181920212223242526272829303132// 在页面中使用import Taro, &#123; Component &#125; from &quot;@tarojs/taro&quot;;import &#123; View &#125; from &quot;@tarojs/components&quot;;class index extends Component &#123; onShareAppMessage(res) &#123; if (res.from === &quot;button&quot;) &#123; const &#123; share = &#123;&#125; &#125; = res.target.dataset; return &#123; title: `自定义分享按钮$&#123;share.title&#125;`, path: `/pages/bill/index`, imageUrl: &quot;&quot;, &#125;; &#125; else &#123; return &#123; title: &quot;右上角分享事件&quot;, path: `/pages/bill/index`, imageUrl: &quot;&quot;, &#125;; &#125; &#125; render() &#123; return ( &lt;View&gt; &lt;Button open-type=&quot;share&quot; data-share=&#123;data&#125;&gt; 点击分享 &lt;/Button&gt; &lt;/View&gt; ); &#125;&#125;export default index; 需要注意的是，onShareAppMessage 不支持异步调用，如果有需求是先请求接口的数据再分享会因为拿不到数据导致分享信息不正确的错误。","categories":[{"name":"taro","slug":"taro","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/taro/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"vue 使用高德地图 Api 获取当前经纬度信息","slug":"blog1","date":"2020-04-02T00:00:00.000Z","updated":"2022-07-31T11:43:24.894Z","comments":false,"path":"2020/04/02/blog1/","link":"","permalink":"https://ovyvo.github.io/yanblog.github.io/2020/04/02/blog1/","excerpt":"","text":"在 utils 里面新建 getLocation.js 封装获取经纬度的公用方法(优化加载速度动态 cdn 引入高德地图) 由于高德 Api 方法获取当前经纬度比较慢，如果需求是在获取到当前经纬度数据之后请求一些数据，需要搭配 promise 使用保证获取到经纬度信息。具体见下面代码 1234567891011121314151617181920212223242526272829function loadSDK() &#123; if (window.AMap) return; return new Promise((resolve, reject) =&gt; &#123; const script = document.createElement(&quot;script&quot;); script.src = &quot;http://webapi.amap.com/maps?v=1.4.6&amp;key=*****************&quot;; //***为申请的高德key document.head.appendChild(script); script.onload = resolve; script.onerror = reject; &#125;);&#125;export default async () =&gt; &#123; await loadSDK(); return new Promise((resolve) =&gt; &#123; // eslint-disable-next-line no-undef AMap.plugin(&quot;AMap.Geolocation&quot;, () =&gt; &#123; // eslint-disable-next-line no-undef const geolocation = new AMap.Geolocation(&#123; enableHighAccuracy: false &#125;); geolocation.getCurrentPosition((status, result) =&gt; &#123; const res = status === &quot;complete&quot; ? result.position : &#123; lat: 39.909187, lng: 116.397451 &#125;; //默认北京 116.397451、39.909187 console.log(&quot;定位结果&quot;, res); resolve(res); &#125;); &#125;); &#125;);&#125;; 在 vue 页面中的使用（这里假设需求是请求离我最近店铺信息列表） 12345678910111213141516171819202122232425262728293031323334353637383940&lt;template&gt; &lt;div class=&quot;main-container&quot;&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;list-item&quot; v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot;&gt; //you can do something &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import * as Api from &#x27;@/api/xxx.js&#x27; //引入请求接口的Apiimport getLocation from &#x27;@/utils/getLocation&#x27; //引入getLocation方法export default &#123; data() &#123; return &#123; params: &#123;&#125;, list: [] &#125; &#125;, mounted() &#123; this.fetchList() &#125;, methods: &#123; async getPosition() &#123; const &#123; lng, lat &#125; = await getLocation() this.params = &#123; lng, lat &#125; &#125;, async fetchList() &#123; await this.getPosition() const &#123; list &#125; = await Api.fetchList(this.params) this.list = list &#125; &#125;&#125;&lt;/script&gt;&lt;style lang=&#x27;less&#x27; scoped&gt;&lt;/style&gt; 注意如果在 index.html 中引入高德地图在全局使用 AMap 构造函数需要在 vue.config.js 添加如下配置,否则会报‘AMap is not defined’错误 1234567module.exports = &#123; configureWebpack: &#123; externals: &#123; AMap: &quot;AMap&quot;, &#125;, &#125;,&#125;; 在页面中使用（举个 🌰，代码未测试） 12345678910111213141516171819&lt;script&gt;import AMap from &#x27;AMap&#x27;export default&#123; methods:&#123; fn()&#123; AMap.plugin(&#x27;AMap.Geolocation&#x27;, () =&gt; &#123; const geolocation = new AMap.Geolocation(&#123; enableHighAccuracy: false &#125;) geolocation.getCurrentPosition((status, result) =&gt; &#123; const res = status === &#x27;complete&#x27; ? result.position : &#123; lat: 39.909187, lng: 116.397451 &#125; //默认北京 116.397451、39.909187 console.log(&#x27;定位结果&#x27;, res) &#125;) &#125;) &#125; &#125;&#125;&lt;/script&gt;","categories":[{"name":"vue","slug":"vue","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/vue/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/%E5%B7%A5%E5%85%B7/"}]}],"categories":[{"name":"工具","slug":"工具","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/%E5%B7%A5%E5%85%B7/"},{"name":"组件","slug":"组件","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/%E7%BB%84%E4%BB%B6/"},{"name":"vue","slug":"vue","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/vue/"},{"name":"taro","slug":"taro","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/taro/"}],"tags":[{"name":"代码规范","slug":"代码规范","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"},{"name":"Element","slug":"Element","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/Element/"},{"name":"Linux","slug":"Linux","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/Linux/"},{"name":"vue-3","slug":"vue-3","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/vue-3/"},{"name":"小程序","slug":"小程序","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"工具","slug":"工具","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/%E5%B7%A5%E5%85%B7/"}]}