{"meta":{"title":"Yan's Blog","subtitle":"","description":"","author":"OVYVO","url":"https://ovyvo.github.io/yanblog.github.io","root":"/yanblog.github.io/"},"pages":[{"title":"关于","date":"2022-07-31T11:43:24.895Z","updated":"2022-07-31T11:43:24.895Z","comments":false,"path":"about/index.html","permalink":"https://ovyvo.github.io/yanblog.github.io/about/index.html","excerpt":"","text":"沪漂前端攻城狮 123456789101112131415161718192021&#123; name: &#x27;若拙&#x27; age: 25, gender: &#x27;男&#x27;, profession: &#x27;Web Developer&#x27;, experience: &#x27;2&#x27;, address: &#x27;上海市普陀区&#x27;, education: &#x27;本科&#x27;, github: &#x27;https://github.com/OVYVO&#x27;, email: &#x27;vue12306@163.com&#x27;, description: &#x27;醉后不知天在水，满船清梦压星河&#x27;, skills: [ [&#x27;Html&#x27;, &#x27;Javascript&#x27;, &#x27;CSS&#x27;, &#x27;ES6&#x27;, &#x27;Node&#x27;], [&#x27;Vue&#x27;,&#x27;Nuxt&#x27;,&#x27;Taro&#x27;,&#x27;React&#x27;], [&#x27;AntDesign&#x27;, &#x27;Element&#x27;, &#x27;Vant&#x27;], [&#x27;Webpack&#x27;, &#x27;Gulp&#x27;, &#x27;vite&#x27;], [&#x27;Less&#x27;,&#x27;Sass&#x27;], [&#x27;Git&#x27; ] ]&#125;"},{"title":"书单","date":"2022-07-31T11:43:24.895Z","updated":"2022-07-31T11:43:24.895Z","comments":false,"path":"books/index.html","permalink":"https://ovyvo.github.io/yanblog.github.io/books/index.html","excerpt":"","text":""},{"title":"线上项目地址","date":"2022-07-31T11:43:24.895Z","updated":"2022-07-31T11:43:24.895Z","comments":false,"path":"links/index.html","permalink":"https://ovyvo.github.io/yanblog.github.io/links/index.html","excerpt":"","text":""},{"title":"个人项目","date":"2022-07-31T11:43:24.895Z","updated":"2022-07-31T11:43:24.895Z","comments":false,"path":"repository/index.html","permalink":"https://ovyvo.github.io/yanblog.github.io/repository/index.html","excerpt":"","text":""},{"title":"分类","date":"2022-07-31T11:43:24.895Z","updated":"2022-07-31T11:43:24.895Z","comments":false,"path":"categories/index.html","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-07-31T11:43:24.896Z","updated":"2022-07-31T11:43:24.896Z","comments":false,"path":"tags/index.html","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"H5在IOS微信webview中无法校验视频时长问题","slug":"blog5","date":"2022-07-30T16:00:00.000Z","updated":"2022-07-31T11:56:48.542Z","comments":false,"path":"2022/07/31/blog5/","link":"","permalink":"https://ovyvo.github.io/yanblog.github.io/2022/07/31/blog5/","excerpt":"","text":"因业务需求需要一个图片视频文件上传功能，需支持主流浏览器及微信钉钉内置浏览器，遂考虑用一个简单的H5页面做上传客户端。视频上传因为要控制视频长度，在其他浏览器中都校验通过，但是在微信中却出了问题 123456789101112131415161718192021222324const beforeRead = (file)=&gt; &#123; return new Promise((resolve,reject)=&gt;&#123; if(props.type == &#x27;video&#x27;)&#123; let url = URL.createObjectURL(file) let audioElement = new Audio(url) audioElement.addEventListener(&quot;loadedmetadata&quot;, ()=&gt;&#123; let audioDuration = audioElement.duration; if(audioDuration&gt;60)&#123; Toast(`仅支持上传1分钟时长以内视频`) reject() &#125;else&#123; resolve(file) &#125; &#125;) &#125;else&#123; if (![&#x27;image/jpeg&#x27;,&#x27;image/png&#x27;].includes(file.type)) &#123; Toast(&#x27;所选文件格式不支持&#x27;); reject() &#125;else&#123; resolve(file) &#125; &#125; &#125;) &#125; 问题原因：IOS微信浏览器需要播放视频才能通过监听loadedmetadata事件获取视频长度，以下是解决办法： 12345678910111213141516171819202122232425262728const beforeRead = (file)=&gt; &#123; return new Promise((resolve,reject)=&gt;&#123; if(props.type == &#x27;video&#x27;)&#123; let url = URL.createObjectURL(file) let audioElement = new Audio(url) audioElement.muted = true audioElement.play().then(()=&gt;audioElement.pause()) audioElement.addEventListener(&quot;loadedmetadata&quot;, ()=&gt;&#123; let audioDuration = audioElement.duration; if(audioDuration&gt;60)&#123; audioElement.muted = false Toast(`仅支持上传1分钟时长以内视频`) reject() &#125;else&#123; audioElement.muted = false resolve(file) &#125; &#125;) &#125;else&#123; if (![&#x27;image/jpeg&#x27;,&#x27;image/png&#x27;].includes(file.type)) &#123; Toast(&#x27;所选文件格式不支持&#x27;); reject() &#125;else&#123; resolve(file) &#125; &#125; &#125;) &#125; H5页面vue3.0+vant，参见upload组件不再赘述！","categories":[{"name":"vue","slug":"vue","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/vue/"}],"tags":[{"name":"vue-3","slug":"vue-3","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/vue-3/"}]},{"title":"Taro小程序添加Echarts代码包过大解决办法","slug":"blog4","date":"2021-10-19T00:00:00.000Z","updated":"2022-07-31T11:43:24.895Z","comments":false,"path":"2021/10/19/blog4/","link":"","permalink":"https://ovyvo.github.io/yanblog.github.io/2021/10/19/blog4/","excerpt":"","text":"上回书说到如何在Taro小程序中引入Echarts图表。如果小程序主包代码体量不多可以直接使用，但是如果小程序代码体量大，稍不留神就会导致主包代码超过2M，无法预览也无法真机调试。本文着重介绍一下Taro引入Echarts分包操作以及注意事项。 前文链接，完整流程可以自行查阅 taro小程序添加Echarts实践分包操作： 将与echarts组件相关都移到分包中，结构目录如下 配置app.config.js 12345678910...subpackages: [ &#123; root: &quot;subpages&quot;, pages: [ &#x27;test/index&#x27; ] &#125; ],... 配置config/index 导致包文件过大的“罪魁祸首”就是ec-canvas文件夹下的echarts.js文件。所以我们需要解决的问题是，分包使用Echarts组件不能将echarts.js打包到主包的common.js里面。Taro机制认为一个js文件被多个模块依赖会将该js抽离到common.js。虽然我们关于Echarts相关的文件都放在subpages里面，但是如果引用多次还是会抽离到主包common.js。所以我们需要使用splitChunks将Echarts部分单独打包，然后使用addChunkPages 往页面注入依赖。 12345678910111213141516171819202122232425262728293031// config/index.jsmini: &#123; compile: &#123; exclude: [ // 跳过编译 path.resolve(__dirname, &#x27;..&#x27;, &#x27;src/subpages/components/ec-canvas/echarts.js&#x27;) ] &#125;, addChunkPages (pages) &#123; pages.set(&#x27;subpages/test/index&#x27;, [&#x27;subpages/common&#x27;]) &#125;, webpackChain (chain) &#123; chain.merge(&#123; optimization: &#123; splitChunks: &#123; cacheGroups: &#123; subpackagesCommon: &#123; name: &#x27;subpages/common&#x27;, minChunks: 2, test: (module,chunks) =&gt; &#123; const isNoOnlySubpackRequired = chunks.find(chunk =&gt; !(/\\bsubpages\\b/.test(chunk.name))) return !isNoOnlySubpackRequired &#125;, priority: 200 &#125; &#125; &#125; &#125; &#125;) &#125; &#125; 至此可以看到打包效果： 页面引用参考前文页面使用。此时如果我们运行代码，可能会发现一个问题：注意这个错误！提示找不到ec-canvas组件。注意编译后的组件ec-canvas.js因为之前抽离了echarts.js，现在已经无法引入，所以需要在编译后的文件中引入subpages里面的common.js。 添加引入plugin(代码很简单，可以先学习一下官方文档如何编写一个插件) 123456789101112131415161718/* eslint-disable import/no-commonjs *//* 解决chunk包没有引用资源的问题**/const fs = require(&#x27;fs&#x27;);const path = require(&quot;path&quot;);module.exports.default = module.exports = (ctx, options) =&gt; &#123; ctx.onBuildFinish(() =&gt; &#123; const chunkRequireArray = options.chunkRequireArray for(let i in chunkRequireArray)&#123; const unitData = chunkRequireArray[i]; const target = path.join(ctx.paths.outputPath, unitData.fileDistPath); const data = fs.readFileSync(target, &#x27;utf8&#x27;); fs.writeFileSync(target, `$&#123;unitData.prependContent&#125;;$&#123;data&#125;`) &#125; &#125;)&#125; 配置config/index.js 12345678910111213plugins: [ [ path.resolve(__dirname, &#x27;..&#x27;, &#x27;plugin/chunkCacheRequirePlugin&#x27;), &#123; chunkRequireArray:[ //可配置多个目标引入文件 &#123; fileDistPath: &#x27;subpages/components/ec-canvas/ec-canvas.js&#x27;, prependContent: &#x27;require(&quot;../../common&quot;);&#x27; &#125; ] &#125; ] ], 重新编译就可以了：","categories":[{"name":"taro","slug":"taro","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/taro/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"Taro小程序引入Echarts教程","slug":"blog3","date":"2021-10-18T00:00:00.000Z","updated":"2022-07-31T11:43:24.895Z","comments":false,"path":"2021/10/18/blog3/","link":"","permalink":"https://ovyvo.github.io/yanblog.github.io/2021/10/18/blog3/","excerpt":"","text":"小程序需要添加简单的数据统计功能。因为对Echats比较熟悉，所以想将Echats引入到项目中，有几点注意事项，记录一下。 taro版本：3.3.2（注意一下版本信息）,官方物料仓库里面的Echarts大多不兼容最新版本taro框架，但是实现的思路都是一样的。大致说一下： 准备工作 下载Echarts官方的小程序插件echarts-for-weixin 传送门 将项目中的ec-canvas文件夹复制保存 去Echarts官网定制图表(不建议全部下载，文件太大，小程序体积大需要分包) 传送门 压缩echarts.js文件(压缩方法可以自行找线上压缩网站或自行压缩，方法附后文） 替换ec-canvas文件中的echarts.js文件 本地压缩方法 12npm install uglify-js -guglifyjs echarts.js -m -o echarts.min.js //注意：替换ec-canvas里面的文件时将echarts.min.js换回来 小程序封装图表组件(以柱状图为例)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465// 柱状图import &#123; Component &#125; from &quot;react&quot;;import &#123; View &#125; from &quot;@tarojs/components&quot;;import &#123; getCurrentInstance &#125; from &quot;@tarojs/taro&quot; //Taro3.x需要使用getCurrentInstance 获取页面DOMimport &#x27;./index.scss&#x27;function setChartData(chart)&#123; const defautOption = &#123; xAxis: &#123; type: &quot;category&quot;, data: [&quot;Mon&quot;, &quot;Tue&quot;, &quot;Wed&quot;, &quot;Thu&quot;, &quot;Fri&quot;, &quot;Sat&quot;, &quot;Sun&quot;], &#125;, yAxis: &#123; type: &quot;value&quot;, &#125;, series: [ &#123; data: [120, 200, 150, 80, 70, 110, 130], type: &quot;bar&quot;, showBackground: true, backgroundStyle: &#123; color: &quot;rgba(220, 220, 220, 0.8)&quot;, &#125;, &#125;, ], &#125;; chart.setOption(defautOption);&#125;export default class BarChart extends Component &#123; constructor(props) &#123; super(props) this.state = &#123; ec: &#123; lazyLoad: true &#125; &#125; &#125; componentDidMount() &#123; &#125; refresh(data) &#123; getCurrentInstance().page.selectComponent(&#x27;#mychart-area&#x27;).init((canvas, width, height) =&gt; &#123; const chart = echarts.init(canvas, null, &#123; width: width, height: height &#125;); setChartData(chart, data); return chart; &#125;); &#125; render() &#123; return ( &lt;View className=&#x27;bar-chart&#x27;&gt; &lt;ec-canvas id=&#x27;mychart-area&#x27; canvasId=&#x27;mychart-area&#x27; ec=&#123;this.state.ec&#125; /&gt; &lt;/View&gt; ); &#125;&#125; 页面使用1234567891011121314151617181920212223242526272829303132333435363738import React, &#123; Component &#125; from &#x27;react&#x27;import &#123; View &#125; from &#x27;@tarojs/components&#x27;import BarChart from &#x27;@/components/barChart&#x27;import &#x27;./index.scss&#x27;export default class Index extends Component &#123; constructor (props) &#123; super(props) this.barChart = React.createRef() this.state = &#123; &#125; &#125; componentWillMount () &#123; &#125; componentDidMount () &#123; // 延迟调用，确保 ec-canvas 节点已存在 setTimeout(() =&gt; &#123; this.barChart.current.refresh() &#125;, 100) &#125; componentWillUnmount () &#123; &#125; componentDidShow () &#123; &#125; componentDidHide () &#123; &#125; render () &#123; return ( &lt;View className=&#x27;selfstudy-container&#x27;&gt; &lt;BarChart ref=&#123;this.barChart&#125; /&gt; &lt;/View&gt; ) &#125;&#125; ——————————————————至此图表引入已完成90%————————————————————-直接页面使用的话会报两个错误： echarts is not defined。（没有拿到ec-canvas页面实例） 解决方法：在 app 或页面配置文件中配置 usingComponents 属性。 12345678export default &#123; usingComponents: &#123; // 定义需要引入的第三方组件 // 1. key 值指定第三方组件名字，以小写开头 // 2. value 值指定第三方组件 js 文件的相对路径 &#x27;ec-canvas&#x27;: &#x27;../../components/ec-canvas/ec-canvas&#x27; &#125;&#125; 注意：Taro3 的组件是没有配置文件的，因此 usingComponents 必须配置在“页面”的配置文件中。2. t.addEventListener is not a function 解决方法：在 ec-canvas文件夹下面的wx-canvas.js文件添加代码： 123456789101112131415161718192021222324252627export default class WxCanvas &#123; constructor(ctx, canvasId, isNew, canvasNode) &#123; this.ctx = ctx; this.canvasId = canvasId; this.chart = null; this.isNew = isNew if (isNew) &#123; this.canvasNode = canvasNode; &#125; else &#123; this._initStyle(ctx); &#125; // this._initCanvas(zrender, ctx); this._initEvent(); &#125; // 新增空函数，修复调用 echarts.init 时报错 addEventListener () &#123;&#125; getContext(contextType) &#123; if (contextType === &#x27;2d&#x27;) &#123; return this.ctx; &#125; &#125;&#125;","categories":[{"name":"taro","slug":"taro","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/taro/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"Taro小程序分享","slug":"blog2","date":"2020-04-03T00:00:00.000Z","updated":"2022-07-31T11:43:24.894Z","comments":false,"path":"2020/04/03/blog2/","link":"","permalink":"https://ovyvo.github.io/yanblog.github.io/2020/04/03/blog2/","excerpt":"","text":"在开发小程序的时候遇到自定义分享按钮分享卡片到好友的需求，由于小程序的分享只有在页面 js 中定义了 onShareAppMessage(Object)方法才会出现右上角的分享按钮,所以需要在页面中自定义分享方法。具体见下： object 参数 onShareAppMessage(Object)事件需要返回一个 Object 对象对象里面包含要分享的标题，转发的路径，以及自定义图片的路径。完成了这一系列操作就可以愉快的去分享微信小程序的页面了。 1234567891011121314151617// 在页面中使用import Taro, &#123; Component &#125; from &quot;@tarojs/taro&quot;;import &#123; View &#125; from &quot;@tarojs/components&quot;;class index extends Component &#123; onShareAppMessage() &#123; return &#123; title: &quot;自定义标题&quot;, path: &quot;/page/user?id=123&quot;, // 自定义的分享路径，点击分享的卡片之后会跳转这里定义的路由 imageUrl: &quot;&quot;, // 图片路径 &#125;; &#125; render() &#123; return &lt;View&gt;微信分享&lt;/View&gt;; &#125;&#125;export default index; 自定义分享按钮事件的实现。有时候，在大多数的业务场景下我们需要在页面中点击某个按钮触发分享的事件，此时需要监听用户点击页面内转发按钮（Button 组件 openType=’share’）就会自动触发 onShareAppMessage 方法。如果需要在 button 中携带信息，需要自定义 button 属性，通过 res.target.dataset 获取。 1234567891011121314151617181920212223242526272829303132// 在页面中使用import Taro, &#123; Component &#125; from &quot;@tarojs/taro&quot;;import &#123; View &#125; from &quot;@tarojs/components&quot;;class index extends Component &#123; onShareAppMessage(res) &#123; if (res.from === &quot;button&quot;) &#123; const &#123; share = &#123;&#125; &#125; = res.target.dataset; return &#123; title: `自定义分享按钮$&#123;share.title&#125;`, path: `/pages/bill/index`, imageUrl: &quot;&quot;, &#125;; &#125; else &#123; return &#123; title: &quot;右上角分享事件&quot;, path: `/pages/bill/index`, imageUrl: &quot;&quot;, &#125;; &#125; &#125; render() &#123; return ( &lt;View&gt; &lt;Button open-type=&quot;share&quot; data-share=&#123;data&#125;&gt; 点击分享 &lt;/Button&gt; &lt;/View&gt; ); &#125;&#125;export default index; 需要注意的是，onShareAppMessage 不支持异步调用，如果有需求是先请求接口的数据再分享会因为拿不到数据导致分享信息不正确的错误。","categories":[{"name":"taro","slug":"taro","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/taro/"}],"tags":[{"name":"小程序","slug":"小程序","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}]},{"title":"vue 使用高德地图 Api 获取当前经纬度信息","slug":"blog1","date":"2020-04-02T00:00:00.000Z","updated":"2022-07-31T11:43:24.894Z","comments":false,"path":"2020/04/02/blog1/","link":"","permalink":"https://ovyvo.github.io/yanblog.github.io/2020/04/02/blog1/","excerpt":"","text":"在 utils 里面新建 getLocation.js 封装获取经纬度的公用方法(优化加载速度动态 cdn 引入高德地图) 由于高德 Api 方法获取当前经纬度比较慢，如果需求是在获取到当前经纬度数据之后请求一些数据，需要搭配 promise 使用保证获取到经纬度信息。具体见下面代码 1234567891011121314151617181920212223242526272829function loadSDK() &#123; if (window.AMap) return; return new Promise((resolve, reject) =&gt; &#123; const script = document.createElement(&quot;script&quot;); script.src = &quot;http://webapi.amap.com/maps?v=1.4.6&amp;key=*****************&quot;; //***为申请的高德key document.head.appendChild(script); script.onload = resolve; script.onerror = reject; &#125;);&#125;export default async () =&gt; &#123; await loadSDK(); return new Promise((resolve) =&gt; &#123; // eslint-disable-next-line no-undef AMap.plugin(&quot;AMap.Geolocation&quot;, () =&gt; &#123; // eslint-disable-next-line no-undef const geolocation = new AMap.Geolocation(&#123; enableHighAccuracy: false &#125;); geolocation.getCurrentPosition((status, result) =&gt; &#123; const res = status === &quot;complete&quot; ? result.position : &#123; lat: 39.909187, lng: 116.397451 &#125;; //默认北京 116.397451、39.909187 console.log(&quot;定位结果&quot;, res); resolve(res); &#125;); &#125;); &#125;);&#125;; 在 vue 页面中的使用（这里假设需求是请求离我最近店铺信息列表） 12345678910111213141516171819202122232425262728293031323334353637383940&lt;template&gt; &lt;div class=&quot;main-container&quot;&gt; &lt;div class=&quot;list&quot;&gt; &lt;div class=&quot;list-item&quot; v-for=&quot;(item,index) in list&quot; :key=&quot;index&quot;&gt; //you can do something &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import * as Api from &#x27;@/api/xxx.js&#x27; //引入请求接口的Apiimport getLocation from &#x27;@/utils/getLocation&#x27; //引入getLocation方法export default &#123; data() &#123; return &#123; params: &#123;&#125;, list: [] &#125; &#125;, mounted() &#123; this.fetchList() &#125;, methods: &#123; async getPosition() &#123; const &#123; lng, lat &#125; = await getLocation() this.params = &#123; lng, lat &#125; &#125;, async fetchList() &#123; await this.getPosition() const &#123; list &#125; = await Api.fetchList(this.params) this.list = list &#125; &#125;&#125;&lt;/script&gt;&lt;style lang=&#x27;less&#x27; scoped&gt;&lt;/style&gt; 注意如果在 index.html 中引入高德地图在全局使用 AMap 构造函数需要在 vue.config.js 添加如下配置,否则会报‘AMap is not defined’错误 1234567module.exports = &#123; configureWebpack: &#123; externals: &#123; AMap: &quot;AMap&quot;, &#125;, &#125;,&#125;; 在页面中使用（举个 🌰，代码未测试） 12345678910111213141516171819&lt;script&gt;import AMap from &#x27;AMap&#x27;export default&#123; methods:&#123; fn()&#123; AMap.plugin(&#x27;AMap.Geolocation&#x27;, () =&gt; &#123; const geolocation = new AMap.Geolocation(&#123; enableHighAccuracy: false &#125;) geolocation.getCurrentPosition((status, result) =&gt; &#123; const res = status === &#x27;complete&#x27; ? result.position : &#123; lat: 39.909187, lng: 116.397451 &#125; //默认北京 116.397451、39.909187 console.log(&#x27;定位结果&#x27;, res) &#125;) &#125;) &#125; &#125;&#125;&lt;/script&gt;","categories":[{"name":"vue","slug":"vue","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/vue/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/%E5%B7%A5%E5%85%B7/"}]}],"categories":[{"name":"vue","slug":"vue","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/vue/"},{"name":"taro","slug":"taro","permalink":"https://ovyvo.github.io/yanblog.github.io/categories/taro/"}],"tags":[{"name":"vue-3","slug":"vue-3","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/vue-3/"},{"name":"小程序","slug":"小程序","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"工具","slug":"工具","permalink":"https://ovyvo.github.io/yanblog.github.io/tags/%E5%B7%A5%E5%85%B7/"}]}