<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yan&#39;s Blog</title>
  
  
  <link href="https://ovyvo.github.io/yanblog.github.io/atom.xml" rel="self"/>
  
  <link href="https://ovyvo.github.io/yanblog.github.io/"/>
  <updated>2024-01-05T05:58:54.238Z</updated>
  <id>https://ovyvo.github.io/yanblog.github.io/</id>
  
  <author>
    <name>OVYVO</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Nginx基本概念及使用方式</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2023/12/08/blog27/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2023/12/08/blog27/</id>
    <published>2023-12-07T16:00:00.000Z</published>
    <updated>2024-01-05T05:58:54.238Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Nginx相关概念"><a href="#Nginx相关概念" class="headerlink" title="Nginx相关概念"></a>Nginx相关概念</h4><ol><li><p>简单请求与非简单请求<br> 请求方法是HEAD、GET、POST三种之一，并且HTTP头信息限于Accept、Accept-Language、Content-Language、Last-Event-ID、Content-Type（限于application/x-www-form-urlencoded、multipart/form-data、text/plain）即为简单请求，其余皆为非简单请求。简单请求与非简单请求区别体现在服务器对请求响应的预处理以及请求信息设置还有返回信息的处理上，不详细表述，可自行查阅相关文档。</p></li><li><p>跨域<br>开发几乎都知道，不详细表述</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同源的例子</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//example.com/app1/index.html  //只是路径不同</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//example.com/app2/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//Example.com:80  //只是大小写差异</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//example.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不同源的例子</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//example.com/app1   //协议不同</span></span><br><span class="line"><span class="attr">https</span>:<span class="comment">//example.com/app2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//example.com        //host 不同</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//www.example.com</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//myapp.example.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//example.com        //端口不同</span></span><br><span class="line"><span class="attr">http</span>:<span class="comment">//example.com:8080</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>正向代理与反向代理<br>正向代理：客户端-&gt;代理服务器-&gt;目标服务器，客户端向代理服务器发送请求指定目标服务器，由代理服务器与目标服务器进行数据交换，再又代理服务器将数据返回给客户端。理解：翻墙工具<br>反向代理：客户端-&gt;代理服务器-&gt;服务器集群，客户端发送请求给代理服务器，代理服务器将请求再分发给服务器集群，具体哪个服务器处理信息不知道，使得真实处理的服务器对客户端不可见。理解：商店买东西，明确买什么商品，商店采购，商店扮演的就是反向服务器角色。</p></li><li><p>负载均衡<br>请求并发不多的情况下，服务器能够正常响应所有的请求，网络响应快速。当并发量上来了之后，单一的服务器不能同时处理太多的请求。此时只能将服务器性能提高。或者采用负载均衡的做法，简单理解就是，使用多台服务器形成一个服务器集群，当大规模的请求来临的时候，由Nginx充当协调员角色，将请求分发到不同的服务器去处理并返回响应。</p></li><li><p>动静分离<br>将服务器上的静态资源与动态资源分离。根据不同的请求类型请求对应的资源，还可以利用nginx缓存的优势更快的响应资源请求。</p></li></ol><h4 id="Nginx操作常用命令"><a href="#Nginx操作常用命令" class="headerlink" title="Nginx操作常用命令"></a>Nginx操作常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nginx -s reload  <span class="comment"># 向主进程发送信号，重新加载配置文件，热重启</span></span><br><span class="line">nginx -s reopen <span class="comment"># 重启 Nginx</span></span><br><span class="line">nginx -s stop    <span class="comment"># 快速关闭</span></span><br><span class="line">nginx -s quit    <span class="comment"># 等待工作进程处理完成后关闭</span></span><br><span class="line">nginx -T         <span class="comment"># 查看当前 Nginx 最终的配置</span></span><br><span class="line">nginx -t -c &lt;配置路径&gt;    <span class="comment"># 检查配置是否有问题，如果已经在配置目录，则不需要-c</span></span><br></pre></td></tr></table></figure><h4 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h4><ul><li><p>主配置文件/etc/nginx/nginx.conf</p></li><li><p>nginx.config结构图:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main        <span class="comment"># 全局配置，对全局生效</span></span><br><span class="line">├── events  <span class="comment"># 配置影响 Nginx 服务器或与用户的网络连接</span></span><br><span class="line">├── http    <span class="comment"># 配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置</span></span><br><span class="line">│   ├── upstream <span class="comment"># 配置后端服务器具体地址，负载均衡配置不可或缺的部分</span></span><br><span class="line">│   ├── server   <span class="comment"># 配置虚拟主机的相关参数，一个 http 块中可以有多个 server 块</span></span><br><span class="line">│   ├── server</span><br><span class="line">│   │   ├── location  <span class="comment"># server 块可以包含多个 location 块，location 指令用于匹配 uri</span></span><br><span class="line">│   │   ├── location</span><br><span class="line">│   │   └── ...</span><br><span class="line">│   └── ...</span><br><span class="line">└── ...</span><br></pre></td></tr></table></figure></li><li><p>配置实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;                        <span class="comment"># 运行用户，默认即是nginx，可以不进行设置</span></span><br><span class="line">worker_processes  1;                <span class="comment"># Nginx 进程数，一般设置为和 CPU 核数一样</span></span><br><span class="line">error_log  /var/log/nginx/error.log warn;   <span class="comment"># Nginx 的错误日志存放目录</span></span><br><span class="line">pid        /var/run/nginx.pid;      <span class="comment"># Nginx 服务启动时的 pid 存放位置</span></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">  use epoll;     <span class="comment"># 使用epoll的I/O模型(如果你不知道Nginx该使用哪种轮询方法，会自动选择一个最适合你操作系统的)</span></span><br><span class="line">  worker_connections 1024;   <span class="comment"># 每个进程允许最大并发数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;   <span class="comment"># 配置使用最频繁的部分，代理、缓存、日志定义等绝大多数功能和第三方模块的配置都在这里设置</span></span><br><span class="line">  <span class="comment"># 设置日志模式</span></span><br><span class="line">  log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                    <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  access_log  /var/log/nginx/access.log  main;   <span class="comment"># Nginx访问日志存放位置</span></span><br><span class="line"></span><br><span class="line">  sendfile            on;   <span class="comment"># 开启高效传输模式</span></span><br><span class="line">  tcp_nopush          on;   <span class="comment"># 减少网络报文段的数量</span></span><br><span class="line">  tcp_nodelay         on;</span><br><span class="line">  keepalive_timeout   65;   <span class="comment"># 保持连接的时间，也叫超时时间，单位秒</span></span><br><span class="line">  types_hash_max_size 2048;</span><br><span class="line"></span><br><span class="line">  include             /etc/nginx/mime.types;      <span class="comment"># 文件扩展名与类型映射表</span></span><br><span class="line">  default_type        application/octet-stream;   <span class="comment"># 默认文件类型</span></span><br><span class="line"></span><br><span class="line">  include /etc/nginx/conf.d/*.conf;   <span class="comment"># 加载子配置项</span></span><br><span class="line">  </span><br><span class="line">  server &#123;</span><br><span class="line">    listen       80;       <span class="comment"># 配置监听的端口</span></span><br><span class="line">    server_name  localhost;    <span class="comment"># 配置的域名</span></span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">      root   /usr/share/nginx/html;  <span class="comment"># 网站根目录</span></span><br><span class="line">      index  index.html index.htm;   <span class="comment"># 默认首页文件</span></span><br><span class="line">      deny 172.168.22.11;   <span class="comment"># 禁止访问的ip地址，可以为all</span></span><br><span class="line">      allow 172.168.33.44； <span class="comment"># 允许访问的ip地址，可以为all</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    error_page 500 502 503 504 /50x.html;  <span class="comment"># 默认50x对应的访问页面</span></span><br><span class="line">    error_page 400 404 error.html;   <span class="comment"># 同上</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>全局变量</p><table><thead><tr><th>变量名</th><th>作用</th></tr></thead><tbody><tr><td>$host</td><td>请求信息中的 Host，如果请求中没有 Host 行，则等于设置的服务器名，不包含端口</td></tr><tr><td>$request_method</td><td>客户端请求类型，如 GET、POST</td></tr><tr><td>$remote_addr</td><td>客户端的 IP 地址</td></tr><tr><td>$args</td><td>请求参数</td></tr><tr><td>$arg_PARAMETER</td><td>GET 请求中变量名 PARAMETER 参数的值，例如：$http_user_agent(Uaer-Agent 值)…</td></tr><tr><td>$content_length</td><td>请求头中的 Content-length 字段</td></tr><tr><td>$http_user_agent</td><td>客户端agent信息</td></tr><tr><td>$http_cookie</td><td>客户端cookie信息</td></tr><tr><td>$remote_addr</td><td>客户端的IP地址</td></tr><tr><td>$remote_port</td><td>客户端端口</td></tr><tr><td>$http_user_agent</td><td>客户端agent信息</td></tr><tr><td>$server_protocol</td><td>请求使用的协议，如 HTTP/1.0、HTTP/1.1</td></tr><tr><td>$server_addr</td><td>服务器地址</td></tr><tr><td>$server_name</td><td>服务器名称</td></tr><tr><td>$server_port</td><td>服务器端口号</td></tr><tr><td>$scheme</td><td>HTTP 方法（如http，https）</td></tr><tr><td>…</td><td>…</td></tr></tbody></table></li><li><p>反向代理配置</p><ol><li>简单配置，例如前端api接口请求转发<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name localhost;</span><br><span class="line"></span><br><span class="line">  location /api &#123;</span><br><span class="line">    proxy_pass http://www.xxx.com;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>请求转发<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name localhost;</span><br><span class="line"></span><br><span class="line">  // 把访问 http://127.0.0.1:9001/edu 的请求转发到 http://127.0.0.1:8080</span><br><span class="line">  // 把访问 http://127.0.0.1:9001/vod 的请求转发到 http://127.0.0.1:8081</span><br><span class="line">  </span><br><span class="line">  location ~ /edu/ &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8080;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location ~ /vod/ &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:8081;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>跨域配置</p><ol><li>反向代理处理跨域问题<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen 9001;</span><br><span class="line">  server_name a.abc.com;</span><br><span class="line"></span><br><span class="line">  // 假设a、b都是服务器的二级域名，指向的ip都一样但是二级域名间请求仍然会跨域</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_pass b.abc.com;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>以上配置会将a.abc.com的请求全部代理到b.abc.com，通常情况下不需要代理全部的请求，所以可以使用请求的后缀来区分静态资源与动态资源的区分。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求跨域，约定代理后端服务请求path以/apis/开头</span></span><br><span class="line">location ^~/api/ &#123;</span><br><span class="line">  <span class="comment"># 这里重写了请求，将正则匹配中的第一个分组的path拼接到真正的请求后面，并用break停止后续匹配</span></span><br><span class="line">  rewrite ^/apis/(.*)$ /<span class="variable">$1</span> <span class="built_in">break</span>;</span><br><span class="line">  proxy_pass b.abc.com;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 两个域名之间cookie的传递与回写</span></span><br><span class="line">  proxy_cookie_domain a.abc.com b.abc.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>设置请求头处理跨域问题<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/conf.d/b.conf</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen       80;</span><br><span class="line">  server_name  b.abc.com;</span><br><span class="line">  </span><br><span class="line">  add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="variable">$http_origin</span>;   <span class="comment"># 全局变量获得当前请求origin，带cookie的请求不支持*</span></span><br><span class="line">  add_header <span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span> <span class="string">&#x27;true&#x27;</span>;    <span class="comment"># 为 true 可带上 cookie</span></span><br><span class="line">  add_header <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;  <span class="comment"># 允许请求方法</span></span><br><span class="line">  add_header <span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span> <span class="variable">$http_access_control_request_headers</span>;  <span class="comment"># 允许请求的 header，可以为 *</span></span><br><span class="line">  add_header <span class="string">&#x27;Access-Control-Expose-Headers&#x27;</span> <span class="string">&#x27;Content-Length,Content-Range&#x27;</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable">$request_method</span> = <span class="string">&#x27;OPTIONS&#x27;</span>) &#123;</span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> 1728000;   <span class="comment"># OPTIONS 请求的有效期，在有效期内不用发出另一条预检请求</span></span><br><span class="line">    add_header <span class="string">&#x27;Content-Type&#x27;</span> <span class="string">&#x27;text/plain; charset=utf-8&#x27;</span>;</span><br><span class="line">    add_header <span class="string">&#x27;Content-Length&#x27;</span> 0;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">return</span> 204;                  <span class="comment"># 200 也可以</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    root  /usr/share/nginx/html/b;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>开启gzip<br>nginx配置gzip需要配合前端工程打包成gzip模式才能正常使用。例如vite中使用vite-plugin-compression插件打包资源文件，<a href="http://nginx.org/en/docs/http/ngx_http_gzip_module.html">配置参考</a></p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/conf.d/gzip.conf</span></span><br><span class="line">gzip on; <span class="comment"># 默认off，是否开启gzip</span></span><br><span class="line">gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; <span class="comment"># 采用gzip压缩的MIME文件类型</span></span><br><span class="line">gzip_static on; <span class="comment"># 默认 off，该模块启用后，Nginx 首先检查是否存在请求静态文件的 gz 结尾的文件，如果有则直接返回该 .gz 文件内容</span></span><br><span class="line">gzip_proxied any; <span class="comment"># 默认 off，nginx做为反向代理时启用，用于设置启用或禁用从代理服务器上收到相应内容 gzip 压缩</span></span><br><span class="line">gzip_vary on; <span class="comment"># 用于在响应消息头中添加 Vary：Accept-Encoding，使代理服务器根据请求头中的 Accept-Encoding 识别是否启用 gzip 压缩</span></span><br><span class="line">gzip_comp_level 6; <span class="comment"># gzip 压缩比，压缩级别是 1-9，1 压缩级别最低，9 最高，级别越高压缩率越大，压缩时间越长，建议 4-6</span></span><br><span class="line">gzip_buffers 16 8k; <span class="comment"># 获取多少内存用于缓存压缩结果，16 8k 表示以 8k*16 为单位获得</span></span><br><span class="line">gzip_min_length 1k; <span class="comment"># 设置最低压缩文件大小</span></span><br><span class="line">gzip_http_version 1.1; <span class="comment"># 默认 1.1，启用 gzip 所需的 HTTP 最低版本</span></span><br></pre></td></tr></table></figure></li><li><p>负载均衡<br>nginx配置负载均衡有几种分配方式</p><ol><li>轮询，默认方式，每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务挂了，能自动剔除；</li><li>weight，权重分配，指定轮询几率，权重越高，在被访问的概率越大，用于后端服务器性能不均的情况；</li><li>ip_hash，每个请求按访问 IP 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决动态网页 session 共享问题。负载均衡每次请求都会重新定位到服务器集群中的某一个，那么已经登录某一个服务器的用户再重新定位到另一个服务器，其登录信息将会丢失，这样显然是不妥的；</li><li>fair（第三方），按后端服务器的响应时间分配，响应时间短的优先分配，依赖第三方插件 nginx-upstream-fair，需要先安装；<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  upstream myserver &#123;</span><br><span class="line">    <span class="comment"># ip_hash;  # ip_hash 方式</span></span><br><span class="line">    <span class="comment"># fair;   # fair 方式</span></span><br><span class="line">    server 127.0.0.1:8081;  <span class="comment"># 负载均衡目的服务地址</span></span><br><span class="line">    server 127.0.0.1:8080;</span><br><span class="line">    server 127.0.0.1:8082 weight=10;  <span class="comment"># weight 方式，不写默认为 1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://myserver;</span><br><span class="line">      proxy_connect_timeout 10;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>配置动静分离<br>通过请求后缀名匹配不同资源请求方式实现动静分离，另外可以给静态资源文件设置expires设置缓存时间，从而减少客户端请求的时间。</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  location / &#123;</span><br><span class="line">    root /dist/;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  location /image &#123;</span><br><span class="line">    root /dist/images;</span><br><span class="line">    autoindex on; <span class="comment"># 开启静态资源列目录</span></span><br><span class="line">    autoindex_exact_size    off;   <span class="comment"># on(默认)显示文件的确切大小，单位是byte；off显示文件大概大小，单位KB、MB、GB</span></span><br><span class="line">    autoindex_localtime     off;   <span class="comment"># off(默认)时显示的文件时间为GMT时间；on显示的文件时间为服务器时间</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>移动端pc端适配</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/conf.d/a.abc.com.conf</span></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  server_name a.abc.com;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">    root  /usr/share/nginx/html/pc;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$http_user_agent</span> ~* <span class="string">&#x27;(Android|webOS|iPhone|iPod|BlackBerry)&#x27;</span>) &#123;</span><br><span class="line">      root /usr/share/nginx/html/mobile;</span><br><span class="line">    &#125;</span><br><span class="line">    index index.html;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>图片防盗链</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">  listen       80;        </span><br><span class="line">  server_name  xxx;</span><br><span class="line">  </span><br><span class="line">  <span class="comment"># 图片防盗链</span></span><br><span class="line">  location ~* \.(gif|jpg|jpeg|png|bmp|swf)$ &#123;</span><br><span class="line">    valid_referers none blocked server_names ~\.google\. ~\.baidu\. *.qq.com;  <span class="comment"># 只允许本机 IP 外链引用</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$invalid_referer</span>)&#123;</span><br><span class="line">      <span class="built_in">return</span> 403;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置图片，字体等静态文件缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 图片缓存时间设置</span></span><br><span class="line">location ~ .*\.(css|js|jpg|png|gif|swf|woff|woff2|eot|svg|ttf|otf|mp3|m4a|aac|txt)$ &#123;</span><br><span class="line">  expires 10d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果不希望缓存</span></span><br><span class="line">expires -1;</span><br></pre></td></tr></table></figure></li></ul><p>以上只涉及到nginx部分常用配置，掌握了这些基本上就能cover住nginx操作，因为平时仅负责前端开发部分的工作，服务器方面实践比较少，仅以此文记录一下方便以后参考。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Nginx相关概念&quot;&gt;&lt;a href=&quot;#Nginx相关概念&quot; class=&quot;headerlink&quot; title=&quot;Nginx相关概念&quot;&gt;&lt;/a&gt;Nginx相关概念&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;简单请求与非简单请求&lt;br&gt; 请求方法是HEAD、GET、POST</summary>
      
    
    
    
    <category term="工具" scheme="https://ovyvo.github.io/yanblog.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="nginx" scheme="https://ovyvo.github.io/yanblog.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>Vue3富文本编辑器组件封装</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2023/10/25/blog26/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2023/10/25/blog26/</id>
    <published>2023-10-25T00:00:00.000Z</published>
    <updated>2024-01-05T05:14:46.712Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>近期后台项目有使用富文本编辑器的需求，本文记录一下封装细节</p></blockquote><h5 id="富文本组件库参考"><a href="#富文本组件库参考" class="headerlink" title="富文本组件库参考"></a>富文本组件库参考</h5><ul><li>TinyMCE - 富文本编辑器里的 Word ，功能想不到的丰富</li><li>tiptap - 多人在线实时协同编辑</li><li>CKEditor 5 - 开源免费可商用，行内编辑</li><li>Quill - 易扩展、轻量级二开、代码高亮好用</li><li>Froala - 插件丰富，UI友好，编辑器里的苹果</li><li>summernote - 恰到好处的轻，可直接粘贴图片</li><li>Trumbowyg - 超轻量，体积小巧，仅 8KB</li></ul><p>以上即是一些常见常用的富文本组件库，各组件库优缺点都有，具体就不详细踩坑分析。作者使用TinyMCE作为实例。</p><p>文档地址：<a href="http://tinymce.ax-z.cn/">TinyMCE中文文档</a>    |    <a href="https://www.tiny.cloud/docs/tinymce/6/">TinyMCE官方文档</a></p><h5 id="组件封装"><a href="#组件封装" class="headerlink" title="组件封装"></a>组件封装</h5><ol><li>安装相关依赖</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pnpm add tinymce@^<span class="number">5</span> @tinymce/tinymce-vue</span><br></pre></td></tr></table></figure><ol start="2"><li>封装组件</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;richtext-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Editor</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">id</span>=<span class="string">&quot;myedit&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:init</span>=<span class="string">&quot;initProps&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:disabled</span>=<span class="string">&quot;readonly&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;reactive, ref, onMounted, watch, watchEffect&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> tinymce <span class="keyword">from</span> <span class="string">&#x27;tinymce/tinymce&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Editor</span> <span class="keyword">from</span> <span class="string">&#x27;@tinymce/tinymce-vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">QiniuUpload</span> <span class="keyword">from</span> <span class="string">&#x27;@/utils/qnUpload&#x27;</span><span class="comment">// 图片上传方法自行实现</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// UI资源相关</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="string">&quot;tinymce/themes/silver&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="string">&quot;tinymce/icons/default&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="string">&quot;tinymce/icons/default/icons&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 插件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="string">&#x27;tinymce/plugins/image&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="string">&#x27;tinymce/plugins/paste&#x27;</span> <span class="comment">//粘贴图片上传请务必引入此插件</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> props = <span class="title function_">defineProps</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">modelValue</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">type</span>: <span class="title class_">String</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">default</span>: <span class="string">&quot;&quot;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">height</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">type</span>: <span class="title class_">Number</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">default</span>: <span class="number">278</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">readonly</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">type</span>: <span class="title class_">Boolean</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">default</span>: <span class="literal">true</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="string">&#x27;update:modelValue&#x27;</span>])</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> content = <span class="title function_">ref</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> initProps = <span class="title function_">reactive</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">selector</span>: <span class="string">&#x27;#myedit&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">readonly</span>: props.<span class="property">readonly</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">height</span>: props.<span class="property">height</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">resize</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">language_url</span>: <span class="string">&quot;/tinymce/langs/zh-Hans.js&quot;</span>, <span class="comment">//语言包路径</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">language</span>: <span class="string">&quot;zh-Hans&quot;</span>, <span class="comment">//语言</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">skin_url</span>: <span class="string">&quot;/tinymce/skins/ui/custom&quot;</span>, <span class="comment">// 定制样式资源路径</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">content_css</span>: <span class="string">&#x27;/tinymce/skins/ui/custom/content.min.css&#x27;</span>, <span class="comment">// 定制样式资源路径</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">branding</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">menubar</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">toolbar_sticky</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">toolbar_groups</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">elementpath</span>: <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">toolbar</span>: <span class="string">`undo redo bold italic underline strikethrough</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">            removeformat subscript superscript | alignleft </span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">            aligncenter alignright alignjustify outdent indent |</span></span></span></span><br><span class="line"><span class="string"><span class="language-javascript"><span class="language-xml">            paste image`</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">plugins</span>: <span class="string">&#x27;image paste&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">paste_data_images</span>: <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 图片上传处理</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">images_upload_handler</span>: <span class="title function_">async</span>(<span class="attr">blobInfo</span>:any, <span class="attr">succFun</span>:any, <span class="attr">failFun</span>:any)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> file = blobInfo.<span class="title function_">blob</span>() </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">try</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">const</span> <span class="attr">data</span>:any = <span class="keyword">await</span> <span class="title class_">QiniuUpload</span>(file,<span class="string">&#x27;image&#x27;</span>,<span class="string">&#x27;xxx&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">succFun</span>(data?.<span class="property">real_url</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125; <span class="keyword">catch</span> (error) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">failFun</span>(error)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;tinymce.<span class="title function_">init</span>(&#123;&#125;)&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">watchEffect</span>(<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  content.<span class="property">value</span> = props.<span class="property">modelValue</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">watch</span>(content,<span class="function">()=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">updateData</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">const</span> <span class="title function_">updateData</span> = (<span class="params"></span>)=&gt;&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">emits</span>(<span class="string">&#x27;update:modelValue&#x27;</span>,content.<span class="property">value</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.richtext-container</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  :<span class="built_in">deep</span>(.tox)&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.tox-statusbar</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">display</span>: none;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>组件使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">my-richText</span> <span class="attr">v-model</span>=<span class="string">&quot;richText&quot;</span> <span class="attr">:readonly</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-richText</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; ref, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> richText = <span class="title function_">ref</span>(<span class="string">&#x27;&lt;p&gt;哈哈哈哈呵呵呵呵&lt;/p&gt;&#x27;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title function_">watch</span>(richText,<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="variable language_">console</span>.<span class="title function_">log</span>(val)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><ol start="4"><li>效果展示<br><img src="https://img-blog.csdnimg.cn/afe043c722a242a196a11cd6e82ad830.png" alt="在这里插入图片描述"></li></ol><h5 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h5><ol><li>TinyMce富文本组件库因其丰富的配置及插件系统更受欢迎，init方法中的参数配置请详细阅读官方文档或中文文档。</li><li>样式配置及汉化版教程请自行百度，因比较简单不做过多阐述。</li><li>粘贴图片上传与工具栏中的图片上传有一些区别，粘贴图片上传请务必引入paste插件。</li><li>readonly属性作者配置不生效，在Editor上使用disabled可以实现同样的只读效果。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;近期后台项目有使用富文本编辑器的需求，本文记录一下封装细节&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&quot;富文本组件库参考&quot;&gt;&lt;a href=&quot;#富文本组件库参考&quot; class=&quot;headerlink&quot; title=&quot;富文本组件库参考&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="组件" scheme="https://ovyvo.github.io/yanblog.github.io/categories/%E7%BB%84%E4%BB%B6/"/>
    
    
    <category term="vue-3" scheme="https://ovyvo.github.io/yanblog.github.io/tags/vue-3/"/>
    
  </entry>
  
  <entry>
    <title>AI及设计相关</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2023/09/05/blog24/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2023/09/05/blog24/</id>
    <published>2023-09-04T16:00:00.000Z</published>
    <updated>2024-01-05T05:14:46.712Z</updated>
    
    <content type="html"><![CDATA[<ol><li>AI资源导航平台</li></ol><ul><li>[AI资源]<a href="https://73496.com/#term-12">https://73496.com/#term-12</a></li><li>[设计资源]<a href="https://jiafangbb.com/#term-15220">https://jiafangbb.com/#term-15220</a></li></ul><ol start="2"><li>提示词推荐平台</li></ol><ul><li>[prompthero]<a href="https://prompthero.com/">https://prompthero.com/</a></li><li>[promptPerfect]<a href="https://promptperfect.jinaai.cn/">https://promptperfect.jinaai.cn/</a></li><li>[Finding.art]<a href="https://finding.art/#/">https://finding.art/#/</a></li><li>[openart.ai]<a href="https://openart.ai/">https://openart.ai/</a></li><li>[playgroundai]<a href="https://playgroundai.com/">https://playgroundai.com/</a></li><li>[arthub.ai]<a href="https://arthub.ai/">https://arthub.ai/</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;AI资源导航平台&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;[AI资源]&lt;a href=&quot;https://73496.com/#term-12&quot;&gt;https://73496.com/#term-12&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[设计资源]&lt;a href=&quot;http</summary>
      
    
    
    
    <category term="资源" scheme="https://ovyvo.github.io/yanblog.github.io/categories/%E8%B5%84%E6%BA%90/"/>
    
    
    <category term="AIGC" scheme="https://ovyvo.github.io/yanblog.github.io/tags/AIGC/"/>
    
  </entry>
  
  <entry>
    <title>MutationObserver概述及应用</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2023/08/23/blog23/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2023/08/23/blog23/</id>
    <published>2023-08-22T16:00:00.000Z</published>
    <updated>2024-01-05T05:14:46.712Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：紧接上文前端性能监控一文中在FMP,FCP算法设计中需要使用到MutationObserver对象进行一些DOM监控的操作，本文详细介绍一下MutationObserver Api</p></blockquote><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>MutationObserver用于监控DOM树变化，提供了异步方法来监听DOM元素的增加、删除、属性变化操作。开发者可以借助此方法对DOM树变化做出相应的响应。</p><h4 id="构造函数MutationObserver"><a href="#构造函数MutationObserver" class="headerlink" title="构造函数MutationObserver()"></a>构造函数MutationObserver()</h4><p>DOM 规范中的 MutationObserver() 构造函数—是 MutationObserver 接口内容的一部分—创建并返回一个新的观察器，它会在触发指定 DOM 事件时，调用指定的回调函数。MutationObserver 对 DOM 的观察不会立即启动；而必须先调用 observe() 方法来确定，要监听哪一部分的 DOM 以及要响应哪些更改。</p><p>observe参数:</p><ul><li>target: 需要观测的目标节点</li><li>options:<ul><li>attributes：是否监测元素的属性变化。</li><li>attributeOldValue：是否在属性变化时记录旧值。</li><li>attributeFilter：指定要监测的属性列表。</li><li>childList：是否监测子元素的添加或移除。</li><li>subtree：是否监测后代元素的变化。</li><li>characterData：是否监测文本节点的内容变化。</li><li>characterDataOldValue：是否在文本节点内容变化时记录旧值。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代码实例</span></span><br><span class="line"><span class="keyword">var</span> targetNode = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#someElement&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> observerOptions = &#123;</span><br><span class="line">  <span class="attr">childList</span>: <span class="literal">true</span>, <span class="comment">// 观察目标子节点的变化，是否有添加或者删除</span></span><br><span class="line">  <span class="attr">attributes</span>: <span class="literal">true</span>, <span class="comment">// 观察属性变动</span></span><br><span class="line">  <span class="attr">subtree</span>: <span class="literal">true</span>, <span class="comment">// 观察后代节点，默认为 false</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(callback);</span><br><span class="line">observer.<span class="title function_">observe</span>(targetNode, observerOptions);</span><br></pre></td></tr></table></figure><h4 id="常见的使用场景"><a href="#常见的使用场景" class="headerlink" title="常见的使用场景"></a>常见的使用场景</h4><ol><li>动态内容加载<br>当页面内容是异步加载或者说是动态生成时，可以使用MutationObserver来监控内容变化，并在变化后进行相应的处理，如页面更新，监听事件的绑定。例如：无限滚动场景下可以监听新内容加载到页面，在DOM变化后添加相应的元素或事件。</li><li>表单输入动态验证<br>当需要实时校验用户输入内容时，使用MutationObserver来监控表单内容，值的变化以及禁用状态等，即可实现表单的动态校验。</li><li>响应式布局<br>当页面布局需要根据DOM变化自适应调整时，使用MutationObserver来监测相关元素的变化，并根据变化动态地调整页面布局。例如，在响应式网页设计中，当窗口大小发生变化或元素被添加或移除时，可以使用MutationObserver来监听相关元素的变化，并根据变化重新计算和调整页面布局，以适应不同的设备和屏幕尺寸。</li><li>组件内部监听<br>在自定义组件的开发中，MutationObserver可以用于监听组件内部的DOM变化，以及对应的属性变化。这样可以在组件内部做出相应的处理，如更新组件的状态、重新渲染组件等。例如，当一个自定义组件中的某个子元素被添加或移除时，可以使用MutationObserver来监听这些变化，并在变化发生后更新组件的状态或重新渲染组件。</li></ol><h4 id="场景实例"><a href="#场景实例" class="headerlink" title="场景实例"></a>场景实例</h4><ol><li>动态校验表单元素</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标元素（表单）</span></span><br><span class="line"><span class="keyword">const</span> form = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myForm&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 MutationObserver 实例</span></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function">(<span class="params">mutationsList</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 在每次变化时进行处理</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> mutation <span class="keyword">of</span> mutationsList) &#123;</span><br><span class="line">    <span class="comment">// 检查是否是值发生变化的子节点</span></span><br><span class="line">    <span class="keyword">if</span> (mutation.<span class="property">type</span> === <span class="string">&#x27;childList&#x27;</span> &amp;&amp; mutation.<span class="property">target</span>.<span class="property">nodeName</span> === <span class="string">&#x27;INPUT&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 执行动态校验逻辑</span></span><br><span class="line">      <span class="title function_">validateForm</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 检查是否是属性变化</span></span><br><span class="line">    <span class="keyword">if</span> (mutation.<span class="property">type</span> === <span class="string">&#x27;attributes&#x27;</span> &amp;&amp; mutation.<span class="property">attributeName</span> === <span class="string">&#x27;disabled&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 执行动态校验逻辑</span></span><br><span class="line">      <span class="title function_">validateForm</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 MutationObserver 监听的类型和目标节点</span></span><br><span class="line"><span class="keyword">const</span> config = &#123; <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">attributes</span>: <span class="literal">true</span>, <span class="attr">subtree</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始观察表单的变化</span></span><br><span class="line">observer.<span class="title function_">observe</span>(form, config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态校验表单内容的函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">validateForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取表单元素</span></span><br><span class="line">  <span class="keyword">const</span> input1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#input1&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> input2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#input2&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 获取表单元素的值和禁用状态</span></span><br><span class="line">  <span class="keyword">const</span> value1 = input1.<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">const</span> value2 = input2.<span class="property">value</span>;</span><br><span class="line">  <span class="keyword">const</span> disabled1 = input1.<span class="property">disabled</span>;</span><br><span class="line">  <span class="keyword">const</span> disabled2 = input2.<span class="property">disabled</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 执行校验逻辑</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>响应式布局</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 MutationObserver 实例</span></span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="keyword">function</span>(<span class="params">mutationsList</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> mutation <span class="keyword">of</span> mutationsList) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mutation.<span class="property">type</span> === <span class="string">&#x27;childList&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// 子节点被添加或移除的处理逻辑</span></span><br><span class="line">      <span class="title function_">adjustLayout</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置 MutationObserver 监听的类型和目标节点</span></span><br><span class="line"><span class="keyword">const</span> config = &#123; <span class="attr">childList</span>: <span class="literal">true</span>, <span class="attr">subtree</span>: <span class="literal">true</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始观察窗口大小变化和元素添加或移除</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, adjustLayout);</span><br><span class="line">observer.<span class="title function_">observe</span>(<span class="variable language_">document</span>.<span class="property">body</span>, config);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化页面布局</span></span><br><span class="line"><span class="title function_">adjustLayout</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 页面布局调整函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">adjustLayout</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 获取窗口宽度</span></span><br><span class="line">  <span class="keyword">const</span> windowWidth = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据窗口宽度调整布局</span></span><br><span class="line">  <span class="keyword">if</span> (windowWidth &gt; <span class="number">1024</span>) &#123;</span><br><span class="line">    <span class="comment">// 大屏幕布局</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (windowWidth &gt; <span class="number">768</span>) &#123;</span><br><span class="line">    <span class="comment">// 中屏幕布局</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 小屏幕布局</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver">MDN Web Docs - MutationObserver</a></p><blockquote><p>注：实例代码均由ChatGpt生成</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前言：紧接上文前端性能监控一文中在FMP,FCP算法设计中需要使用到MutationObserver对象进行一些DOM监控的操作，本文详细介绍一下MutationObserver Api&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;简介&quot;&gt;</summary>
      
    
    
    
    <category term="性能优化" scheme="https://ovyvo.github.io/yanblog.github.io/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="JS" scheme="https://ovyvo.github.io/yanblog.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>前端性能优化</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2023/08/16/blog22/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2023/08/16/blog22/</id>
    <published>2023-08-15T16:00:00.000Z</published>
    <updated>2024-01-05T05:14:46.711Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前端性能优化的宗旨即追求更快，但是也应避免过渡优化。以现有互联网产品为例各厂商性能标准也不一致，在各标准找到适合自己公司用户体量及业务要求的标准需要不断的实践。</p></blockquote><h4 id="前端性能指标"><a href="#前端性能指标" class="headerlink" title="前端性能指标"></a>前端性能指标</h4><ul><li>TTFB : ResponseStart - RequestStart (首包时间，关注网络链路耗时)</li><li>FPT : ResponseEnd - FetchStart （首次渲染时间 / 白屏时间）</li><li>TTI : DomInteractive - FetchStart （首次可交付时间）</li><li>Ready : DomContentLoadEventEnd - FetchStart （加载完成时间）</li><li>Load : LoadEventStart - FetchStart （页面完全加载时间）</li></ul><h4 id="performance-timing-api"><a href="#performance-timing-api" class="headerlink" title="performance timing api"></a>performance timing api</h4><ul><li>计算常见指标可以使用谷歌封装好的js库<a href="https://www.npmjs.com/package/web-vitals">web-vitals</a><br><img src="https://www.w3.org/TR/navigation-timing-2/timestamp-diagram.svg" alt="performance timing api"></li></ul><h4 id="FMP-first-meaningful-paint"><a href="#FMP-first-meaningful-paint" class="headerlink" title="FMP(first meaningful paint)"></a>FMP(first meaningful paint)</h4><ul><li>含义：首次有意义绘制，通常指页面主要内容出现在屏幕上的时间，是用户感知加载体验的主要指标。</li><li>统计逻辑：目前没有统一的统计方法。</li><li>参考文章：<br><a href="https://zhuanlan.zhihu.com/p/44933789">前端监控 - 首屏统计的前世今生</a><br><a href="https://juejin.cn/post/6844903718421266445">前端监控实践 - FMP的智能获取算法</a></li><li>算法流程：<br><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2018/11/22/167395278ec4a425~tplv-t2oaga2asx-jj-mark:3024:0:0:0:q75.png" alt="算法流程"></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> utils = &#123;</span><br><span class="line">  <span class="comment">//获取当前样式</span></span><br><span class="line">  <span class="title function_">getStyle</span>(<span class="params">element, att</span>) &#123;</span><br><span class="line">    <span class="comment">//特性侦测</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">getComputedStyle</span>) &#123;</span><br><span class="line">      <span class="comment">//优先使用W3C规范</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="title function_">getComputedStyle</span>(element)[att];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//针对IE9以下兼容</span></span><br><span class="line">      <span class="keyword">return</span> element.<span class="property">currentStyle</span>[att];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">START_TIME</span> = performance &amp;&amp; performance.<span class="property">timing</span>.<span class="property">responseEnd</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">IGNORE_TAG_SET</span> = [<span class="string">&quot;SCRIPT&quot;</span>, <span class="string">&quot;STYLE&quot;</span>, <span class="string">&quot;META&quot;</span>, <span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;LINK&quot;</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TAG_WEIGHT_MAP</span> = &#123;</span><br><span class="line">  <span class="attr">SVG</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">IMG</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">CANVAS</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">OBJECT</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">EMBED</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">VIDEO</span>: <span class="number">4</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">LIMIT</span> = <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">WW</span> = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">WH</span> = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">VIEWPORT_AREA</span> = <span class="variable constant_">WW</span> * <span class="variable constant_">WH</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">DELAY</span> = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FMPTiming</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">statusCollector</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">muo</span> = <span class="title class_">MutationObserver</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observer</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">callbackCount</span> = <span class="number">1</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">mp</span> = &#123;&#125;;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">initObserver</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">firstSnapshot</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> t = <span class="variable language_">window</span>.<span class="property">__DOMSTART</span> - <span class="variable constant_">START_TIME</span>;</span><br><span class="line">    <span class="keyword">let</span> bodyTarget = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line">    <span class="keyword">if</span> (bodyTarget) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">doTag</span>(bodyTarget, <span class="variable language_">this</span>.<span class="property">callbackCount</span>++);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">statusCollector</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">      t</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">initObserver</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">firstSnapshot</span>();</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observer</span> = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> t = <span class="title class_">Date</span>.<span class="title function_">now</span>() - <span class="variable constant_">START_TIME</span>;</span><br><span class="line">      <span class="keyword">let</span> bodyTarget = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line">      <span class="keyword">if</span> (bodyTarget) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">doTag</span>(bodyTarget, <span class="variable language_">this</span>.<span class="property">callbackCount</span>++);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">statusCollector</span>.<span class="title function_">push</span>(&#123;</span><br><span class="line">        t</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">observer</span>.<span class="title function_">observe</span>(<span class="variable language_">document</span>, &#123;</span><br><span class="line">      <span class="attr">childList</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">subtree</span>: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">readyState</span> === <span class="string">&quot;complete&quot;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">calFinallScore</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(</span><br><span class="line">        <span class="string">&quot;load&quot;</span>,</span><br><span class="line">        <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">calFinallScore</span>();</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">true</span></span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">initResourceMap</span>(<span class="params"></span>) &#123;</span><br><span class="line">    performance.<span class="title function_">getEntries</span>().<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">mp</span>[item.<span class="property">name</span>] = item.<span class="property">responseEnd</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">doTag</span>(<span class="params">target, callbackCount</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> tagName = target.<span class="property">tagName</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable constant_">IGNORE_TAG_SET</span>.<span class="title function_">indexOf</span>(tagName) === -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> childrenLen = target.<span class="property">children</span> ? target.<span class="property">children</span>.<span class="property">length</span> : <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (childrenLen &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> childs = target.<span class="property">children</span>, i = childrenLen - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">          <span class="keyword">if</span> (childs[i].<span class="title function_">getAttribute</span>(<span class="string">&quot;f_c&quot;</span>) === <span class="literal">null</span>) &#123;</span><br><span class="line">            childs[i].<span class="title function_">setAttribute</span>(<span class="string">&quot;f_c&quot;</span>, callbackCount);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">doTag</span>(childs[i], callbackCount);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">calFinallScore</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">MutationObserver</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">flag</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="title function_">checkCanCal</span>(<span class="variable constant_">START_TIME</span>)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">time</span>(<span class="string">&quot;calTime&quot;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">observer</span>.<span class="title function_">disconnect</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">flag</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="variable language_">this</span>.<span class="title function_">deepTraversal</span>(<span class="variable language_">document</span>.<span class="property">body</span>);</span><br><span class="line">        <span class="keyword">let</span> tp;</span><br><span class="line">        res.<span class="property">dpss</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (tp &amp;&amp; tp.<span class="property">st</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (tp.<span class="property">st</span> &lt; item.<span class="property">st</span>) &#123;</span><br><span class="line">              tp = item;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tp = item;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(tp, <span class="variable language_">this</span>.<span class="property">statusCollector</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">initResourceMap</span>();</span><br><span class="line">        <span class="keyword">let</span> resultSet = <span class="variable language_">this</span>.<span class="title function_">filterTheResultSet</span>(tp.<span class="property">els</span>);</span><br><span class="line">        <span class="keyword">let</span> fmpTiming = <span class="variable language_">this</span>.<span class="title function_">calResult</span>(resultSet);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fmp : &quot;</span>, fmpTiming);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">timeEnd</span>(<span class="string">&quot;calTime&quot;</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">calFinallScore</span>();</span><br><span class="line">        &#125;, <span class="variable constant_">DELAY</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">calResult</span>(<span class="params">resultSet</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> rt = <span class="number">0</span>;</span><br><span class="line">    resultSet.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> t = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">if</span> (item.<span class="property">weight</span> === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = +item.<span class="property">node</span>.<span class="title function_">getAttribute</span>(<span class="string">&quot;f_c&quot;</span>) - <span class="number">1</span>;</span><br><span class="line">        t = <span class="variable language_">this</span>.<span class="property">statusCollector</span>[index].<span class="property">t</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="property">weight</span> === <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">node</span>.<span class="property">tagName</span> === <span class="string">&quot;IMG&quot;</span>) &#123;</span><br><span class="line">          t = <span class="variable language_">this</span>.<span class="property">mp</span>[item.<span class="property">node</span>.<span class="property">src</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="property">node</span>.<span class="property">tagName</span> === <span class="string">&quot;SVG&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> index = +item.<span class="property">node</span>.<span class="title function_">getAttribute</span>(<span class="string">&quot;f_c&quot;</span>) - <span class="number">1</span>;</span><br><span class="line">          t = <span class="variable language_">this</span>.<span class="property">statusCollector</span>[index].<span class="property">t</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//background image</span></span><br><span class="line">          <span class="keyword">let</span> match = utils.<span class="title function_">getStyle</span>(item.<span class="property">node</span>, <span class="string">&#x27;background-image&#x27;</span>).<span class="title function_">match</span>(<span class="regexp">/url\(\&quot;(.*?)\&quot;\)/</span>);</span><br><span class="line">          </span><br><span class="line">          <span class="keyword">let</span> s;</span><br><span class="line">          <span class="keyword">if</span> (match &amp;&amp; match[<span class="number">1</span>]) &#123;</span><br><span class="line">            s = match[<span class="number">1</span>];</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (s.<span class="title function_">indexOf</span>(<span class="string">&quot;http&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">            s = location.<span class="property">protocol</span> + match[<span class="number">1</span>];</span><br><span class="line">          &#125;</span><br><span class="line">          t = <span class="variable language_">this</span>.<span class="property">mp</span>[s];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="property">weight</span> === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (item.<span class="property">node</span>.<span class="property">tagName</span> === <span class="string">&quot;CANVAS&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> index = +item.<span class="property">node</span>.<span class="title function_">getAttribute</span>(<span class="string">&quot;f_c&quot;</span>) - <span class="number">1</span>;</span><br><span class="line">          t = <span class="variable language_">this</span>.<span class="property">statusCollector</span>[index].<span class="property">t</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.<span class="property">node</span>.<span class="property">tagName</span> === <span class="string">&quot;VIDEO&quot;</span>) &#123;</span><br><span class="line">          t = <span class="variable language_">this</span>.<span class="property">mp</span>[item.<span class="property">node</span>.<span class="property">src</span>];</span><br><span class="line"></span><br><span class="line">          !t &amp;&amp; (t = <span class="variable language_">this</span>.<span class="property">mp</span>[item.<span class="property">node</span>.<span class="property">poster</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(t, item.<span class="property">node</span>);</span><br><span class="line">      rt &lt; t &amp;&amp; (rt = t);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">filterTheResultSet</span>(<span class="params">els</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    els.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      sum += item.<span class="property">st</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> avg = sum / els.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">return</span> els.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> item.<span class="property">st</span> &gt; avg;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">deepTraversal</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">      <span class="keyword">let</span> dpss = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, child; (child = node.<span class="property">children</span>[i]); i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> s = <span class="variable language_">this</span>.<span class="title function_">deepTraversal</span>(child);</span><br><span class="line">        <span class="keyword">if</span> (s.<span class="property">st</span>) &#123;</span><br><span class="line">          dpss.<span class="title function_">push</span>(s);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">calScore</span>(node, dpss);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">calScore</span>(<span class="params">node, dpss</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;</span><br><span class="line">      width,</span><br><span class="line">      height,</span><br><span class="line">      left,</span><br><span class="line">      top,</span><br><span class="line">      bottom,</span><br><span class="line">      right</span><br><span class="line">    &#125; = node.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">    <span class="keyword">let</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable constant_">WH</span> &lt; top || <span class="variable constant_">WW</span> &lt; left) &#123;</span><br><span class="line">      <span class="comment">//不在可视viewport中</span></span><br><span class="line">      f = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> sdp = <span class="number">0</span>;</span><br><span class="line">    dpss.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">      sdp += item.<span class="property">st</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">let</span> weight = <span class="variable constant_">TAG_WEIGHT_MAP</span>[node.<span class="property">tagName</span>] || <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      weight === <span class="number">1</span> &amp;&amp;</span><br><span class="line">      utils.<span class="title function_">getStyle</span>(node, <span class="string">&#x27;background-image&#x27;</span>) &amp;&amp; </span><br><span class="line">      utils.<span class="title function_">getStyle</span>(node, <span class="string">&#x27;background-image&#x27;</span>) !== <span class="string">&quot;initial&quot;</span></span><br><span class="line">    ) &#123;</span><br><span class="line">      weight = <span class="variable constant_">TAG_WEIGHT_MAP</span>[<span class="string">&quot;IMG&quot;</span>]; <span class="comment">//将有图片背景的普通元素 权重设置为img</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> st = width * height * weight * f;</span><br><span class="line">    <span class="keyword">let</span> els = [&#123; node, st, weight &#125;];</span><br><span class="line">    <span class="keyword">let</span> areaPercent = <span class="variable language_">this</span>.<span class="title function_">calAreaPercent</span>(node);</span><br><span class="line">    <span class="keyword">if</span> (sdp &gt; st * areaPercent || areaPercent === <span class="number">0</span>) &#123;</span><br><span class="line">      st = sdp;</span><br><span class="line">      els = [];</span><br><span class="line">      dpss.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        els = els.<span class="title function_">concat</span>(item.<span class="property">els</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      dpss,</span><br><span class="line">      st,</span><br><span class="line">      els</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">checkCanCal</span>(<span class="params">start</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> ti = <span class="title class_">Date</span>.<span class="title function_">now</span>() - start;</span><br><span class="line">    <span class="keyword">return</span> !(</span><br><span class="line">      ti &gt; <span class="variable constant_">LIMIT</span> ||</span><br><span class="line">      ti -</span><br><span class="line">        ((<span class="variable language_">this</span>.<span class="property">statusCollector</span> &amp;&amp;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">statusCollector</span>.<span class="property">length</span> &amp;&amp;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">statusCollector</span>[<span class="variable language_">this</span>.<span class="property">statusCollector</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">t</span>) ||</span><br><span class="line">          <span class="number">0</span>) &gt;</span><br><span class="line">        <span class="number">1000</span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">calAreaPercent</span>(<span class="params">node</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;</span><br><span class="line">      left,</span><br><span class="line">      right,</span><br><span class="line">      top,</span><br><span class="line">      bottom,</span><br><span class="line">      width,</span><br><span class="line">      height</span><br><span class="line">    &#125; = node.<span class="title function_">getBoundingClientRect</span>();</span><br><span class="line">    <span class="keyword">let</span> wl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> wt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> wr = <span class="variable constant_">WW</span>;</span><br><span class="line">    <span class="keyword">let</span> wb = <span class="variable constant_">WH</span>;</span><br><span class="line">    <span class="keyword">let</span> overlapX =</span><br><span class="line">      right - left + (wr - wl) - (<span class="title class_">Math</span>.<span class="title function_">max</span>(right, wr) - <span class="title class_">Math</span>.<span class="title function_">min</span>(left, wl));</span><br><span class="line">    <span class="keyword">if</span> (overlapX &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">//x 轴无交点</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> overlapY =</span><br><span class="line">      bottom - top + (wb - wt) - (<span class="title class_">Math</span>.<span class="title function_">max</span>(bottom, wb) - <span class="title class_">Math</span>.<span class="title function_">min</span>(top, wt));</span><br><span class="line">    <span class="keyword">if</span> (overlapY &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (overlapX * overlapY) / (width * height);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">FMPTiming</span>();</span><br></pre></td></tr></table></figure><h4 id="FCP-first-contentful-paint"><a href="#FCP-first-contentful-paint" class="headerlink" title="FCP(first contentful paint)"></a>FCP(first contentful paint)</h4><ul><li>含义：浏览器第一次绘制非背景内容时间（文本、图片、非白色canvas或svg）</li><li>统计逻辑：通过performance.getEntriesByType(‘paint’)，取第二个pain的时间，或者通过Mutation Observer观察到首次节点变动的时间。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> domEntries = []</span><br><span class="line"><span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">MutationObserver</span>(<span class="function">(<span class="params">mutationsList</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> mutation <span class="keyword">of</span> mutationsList) &#123;</span><br><span class="line">    <span class="keyword">if</span> (mutation.<span class="property">type</span> == <span class="string">&#x27;childList&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A child node has been added or removed.&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mutation.<span class="property">type</span> == <span class="string">&#x27;addedNodes&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">//TODO新增了节点，做处理，计算此时的可见性/位置/出现时间等信息，然后 push 进数组</span></span><br><span class="line">      domEntries.<span class="title function_">push</span>(mutation) </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFPTime</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> timings = performance.<span class="title function_">getEntriesByType</span>(<span class="string">&#x27;paint&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(timings.<span class="property">length</span> &gt; <span class="number">1</span>)<span class="keyword">return</span> timings[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> timings ? <span class="title class_">Math</span>.<span class="title function_">round</span>(timings.<span class="property">startTime</span>) : <span class="literal">null</span></span><br><span class="line">    <span class="comment">//伪代码,算 DOM 变化时的最小那个时间，即节点首次变动的时间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">round</span>(domEntries.<span class="property">length</span> ? <span class="title class_">Math</span>.<span class="title function_">min</span>(...domEntries.<span class="title function_">map</span>(<span class="function"><span class="params">entry</span> =&gt;</span> entry.<span class="property">time</span>)) : <span class="number">0</span>)</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="前端性能分析工具"><a href="#前端性能分析工具" class="headerlink" title="前端性能分析工具"></a>前端性能分析工具</h4><p><a href="https://github.com/GoogleChrome/lighthouse">lightHouse</a><br><a href="https://www.webpagetest.org/">WebPageTest</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前端性能优化的宗旨即追求更快，但是也应避免过渡优化。以现有互联网产品为例各厂商性能标准也不一致，在各标准找到适合自己公司用户体量及业务要求的标准需要不断的实践。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;前端性能指标&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="性能优化" scheme="https://ovyvo.github.io/yanblog.github.io/categories/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
    
    <category term="JS" scheme="https://ovyvo.github.io/yanblog.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Mac HomeBrew安装及镜像配置</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2023/07/08/blog21/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2023/07/08/blog21/</id>
    <published>2023-07-07T16:00:00.000Z</published>
    <updated>2023-07-08T07:42:28.310Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash -c <span class="string">&quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</span></span><br></pre></td></tr></table></figure><h4 id="安装缓慢问题"><a href="#安装缓慢问题" class="headerlink" title="安装缓慢问题"></a>安装缓慢问题</h4><ol><li>替换homebrew.git<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $(brew --repo)</span><br><span class="line">git remote set-url origin <span class="attr">https</span>:<span class="comment">//mirrors.aliyun.com/homebrew/brew.git</span></span><br></pre></td></tr></table></figure></li><li>替换homebrew-core.git<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $(brew --repo)/<span class="title class_">Library</span>/<span class="title class_">Taps</span>/homebrew/homebrew-core</span><br><span class="line">git remote set-url origin <span class="attr">https</span>:<span class="comment">//mirrors.aliyun.com/homebrew/homebrew-core.git</span></span><br></pre></td></tr></table></figure></li><li>查看shell配置文件，根据配置文件修改步骤4|5<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $SHELL</span><br></pre></td></tr></table></figure></li><li>/bin/zsh替换homebrew-bottles<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.aliyun.com/homebrew/homebrew-bottles&#x27;</span> &gt;&gt; ~/.<span class="property">zshrc</span></span><br><span class="line">source ~/.<span class="property">zshrc</span></span><br></pre></td></tr></table></figure></li><li>/bin/bash替换homebrew-bottles<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.ustc.edu.cn/homebrew-bottles&#x27;</span> &gt;&gt; ~/.<span class="property">bash_profile</span></span><br><span class="line">source ~/.<span class="property">bash_profile</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="恢复默认配置"><a href="#恢复默认配置" class="headerlink" title="恢复默认配置"></a>恢复默认配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// step1:</span></span><br><span class="line">cd $(brew --repo)</span><br><span class="line">git remote set-url origin <span class="attr">https</span>:<span class="comment">//github.com/Homebrew/brew.git</span></span><br><span class="line"><span class="comment">// step2:</span></span><br><span class="line">cd $(brew --repo)/<span class="title class_">Library</span>/<span class="title class_">Taps</span>/homebrew/homebrew-core</span><br><span class="line">git remote set-url origin <span class="attr">https</span>:<span class="comment">//github.com/Homebrew/homebrew-core.git</span></span><br><span class="line"><span class="comment">// step3:</span></span><br><span class="line"><span class="comment">// 将添加到~/.zshrc|~/.bash_profile文件的语句注释掉即可</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</summary>
      
    
    
    
    <category term="工具" scheme="https://ovyvo.github.io/yanblog.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://ovyvo.github.io/yanblog.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Node版本管理工具nvm简介</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2023/07/05/blog19/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2023/07/05/blog19/</id>
    <published>2023-07-04T16:00:00.000Z</published>
    <updated>2024-01-05T05:14:46.711Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>nvm安装<br><a href="https://github.com/nvm-sh/nvm">MacOS详见</a><br><a href="https://github.com/coreybutler/nvm-windows/releases">Windows详见</a></p></blockquote><blockquote><p>nvm常见命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">nvm list 查看已经安装的版本</span><br><span class="line">nvm list installed 查看已经安装的版本</span><br><span class="line">nvm list available 查看网络可以安装的版本</span><br><span class="line">nvm install 安装最新版本nvm</span><br><span class="line">nvm use &lt;version&gt; ## 切换使用指定的版本node</span><br><span class="line">nvm ls 列出所有版本</span><br><span class="line">nvm current显示当前版本</span><br><span class="line">nvm alias &lt;name&gt; &lt;version&gt; ## 给不同的版本号添加别名</span><br><span class="line">nvm unalias &lt;name&gt; ## 删除已定义的别名</span><br><span class="line">nvm reinstall-packages &lt;version&gt; ## 在当前版本node环境下，重新全局安装指定版本号的npm包</span><br><span class="line">nvm on 打开nodejs控制</span><br><span class="line">nvm off 关闭nodejs控制</span><br><span class="line">nvm proxy 查看设置与代理</span><br><span class="line">nvm node_mirror [url] 设置或者查看setting.txt中的node_mirror，如果不设置的默认是 https://nodejs.org/dist/</span><br><span class="line">nvm npm_mirror [url] 设置或者查看setting.txt中的npm_mirror,如果不设置的话默认的是 https://github.com/npm/npm/archive/.</span><br><span class="line">nvm uninstall &lt;version&gt; 卸载制定的版本</span><br><span class="line">nvm use [version] [arch] 切换制定的node版本和位数</span><br><span class="line">nvm root [path] 设置和查看root路径</span><br><span class="line">nvm version 查看当前的版本</span><br></pre></td></tr></table></figure><blockquote><p>注意事项</p></blockquote><ul><li>非首次安装需要将本地环境的nodejs删除干净，首次安装后需要升级nvm也需要将本地所有安装的nodejs分别uninstall</li><li>windows卸载nvm:<ol><li>找到nvm安装目录，如果目录中有unins000.exe文件直接执行即可</li><li>如若没有unins000.exe，按照如下步骤执行</li><li>删除nvm文件夹</li><li>文件夹内右键 此电脑–点击属性–找到高级系统设置–环境变量。</li><li>删除用户变量和系统变量中名为 NVM_HOME 和 NVM_SYMLINK 两个变量。其他的不要改。</li><li>用户变量和系统变量中path中的 %NVM_HOME%;%NVM_SYMLINK% 两个属性，其他的不要改。</li></ol></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;nvm安装&lt;br&gt;&lt;a href=&quot;https://github.com/nvm-sh/nvm&quot;&gt;MacOS详见&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://github.com/coreybutler/nvm-windows/releases</summary>
      
    
    
    
    <category term="工具" scheme="https://ovyvo.github.io/yanblog.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="JS" scheme="https://ovyvo.github.io/yanblog.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Element-plus图标封装</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2023/07/05/blog20/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2023/07/05/blog20/</id>
    <published>2023-07-04T16:00:00.000Z</published>
    <updated>2024-01-05T05:14:46.711Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>按需加载并方便使用,不需要在每个页面单独引入Icon<br><a href="https://element-plus.org/zh-CN/component/icon.html">按需加载配置详见</a></p></blockquote><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @element-plus/icons-vue</span><br></pre></td></tr></table></figure><h4 id="utils-icon-ts"><a href="#utils-icon-ts" class="headerlink" title="utils/icon.ts"></a>utils/icon.ts</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createVNode &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="title class_">ElementPlusIconsVue</span> <span class="keyword">from</span> <span class="string">&#x27;@element-plus/icons-vue&#x27;</span></span><br><span class="line"></span><br><span class="line">interface <span class="title class_">EIconInf</span>&#123;</span><br><span class="line">  <span class="attr">type</span>: string,</span><br><span class="line">  size?: number,</span><br><span class="line">  color?: string,</span><br><span class="line">  cursor?: boolean</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">EIcon</span> = (<span class="params">props: EIconInf</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type, size=<span class="number">20</span>, color=<span class="string">&#x27;&#x27;</span>, cursor=<span class="literal">true</span> &#125; = props</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">EIcon</span>: &#123; [<span class="attr">key</span>: string]: any &#125; = <span class="title class_">ElementPlusIconsVue</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createVNode</span>(</span><br><span class="line">    <span class="title class_">EIcon</span>[type],</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">style</span>:&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="string">`<span class="subst">$&#123;size&#125;</span>px`</span>, </span><br><span class="line">        <span class="attr">color</span>: color ? color : <span class="string">&#x27;inherit&#x27;</span>, </span><br><span class="line">        <span class="attr">cursor</span>: cursor ? <span class="string">&#x27;pointer&#x27;</span> : <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在main-js中引入并注册"><a href="#在main-js中引入并注册" class="headerlink" title="在main.js中引入并注册"></a>在main.js中引入并注册</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">EIcon</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./utils/icon&#x27;</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">//注册EIcon组件</span></span><br><span class="line">app.<span class="title function_">component</span>(<span class="string">&#x27;EIcon&#x27;</span>, <span class="title class_">EIcon</span>)</span><br></pre></td></tr></table></figure><h4 id="页面使用"><a href="#页面使用" class="headerlink" title="页面使用"></a>页面使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">e-icon</span> <span class="attr">type</span>=<span class="string">&quot;House&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">e-icon</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;按需加载并方便使用,不需要在每个页面单独引入Icon&lt;br&gt;&lt;a href=&quot;https://element-plus.org/zh-CN/component/icon.html&quot;&gt;按需加载配置详见&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h</summary>
      
    
    
    
    <category term="组件" scheme="https://ovyvo.github.io/yanblog.github.io/categories/%E7%BB%84%E4%BB%B6/"/>
    
    
    <category term="Element" scheme="https://ovyvo.github.io/yanblog.github.io/tags/Element/"/>
    
  </entry>
  
  <entry>
    <title>rsa加解签及加解密常用工具</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2023/06/06/blog18/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2023/06/06/blog18/</id>
    <published>2023-06-05T16:00:00.000Z</published>
    <updated>2023-07-08T07:32:07.355Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>依赖 jsencrypt encryptlong jsrsasign npm库</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">JSEncrypt</span> <span class="keyword">from</span> <span class="string">&#x27;jsencrypt&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Encrypt</span> <span class="keyword">from</span> <span class="string">&#x27;encryptlong&#x27;</span></span><br><span class="line"><span class="keyword">import</span> jsrsasign <span class="keyword">from</span> <span class="string">&#x27;jsrsasign&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成随机长度字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; length 字符串长度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">generateRandomString</span> = (<span class="params">length</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> characters = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#x27;</span>;</span><br><span class="line">  <span class="keyword">let</span> charactersLength = characters.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    result += characters.<span class="title function_">charAt</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * charactersLength));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 私钥加签</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">object</span>&#125; params 加密对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; privateKey 私钥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">generateRSASign</span> = (<span class="params">params, privateKey</span>)=&gt;&#123;</span><br><span class="line">  <span class="comment">// 1. 将参数按照字典序排序</span></span><br><span class="line">  <span class="keyword">const</span> sortedParams = <span class="title class_">Object</span>.<span class="title function_">keys</span>(params).<span class="title function_">sort</span>();</span><br><span class="line">  <span class="comment">// 2. 将参数按照 key=value 的形式拼接成字符串</span></span><br><span class="line">  <span class="keyword">const</span> paramString = sortedParams.<span class="title function_">map</span>(<span class="function"><span class="params">key</span> =&gt;</span> <span class="string">`<span class="subst">$&#123;params[key]&#125;</span>`</span>).<span class="title function_">join</span>(<span class="string">&#x27;/n&#x27;</span>);</span><br><span class="line">  <span class="comment">// 3. 对参数字符串进行 RSA 签名</span></span><br><span class="line">  <span class="keyword">const</span> rsa = <span class="keyword">new</span> jsrsasign.<span class="title class_">RSAKey</span>()</span><br><span class="line">  rsa = jsrsasign.<span class="property">KEYUTIL</span>.<span class="title function_">getKey</span>(privateKey)</span><br><span class="line">  <span class="keyword">const</span> signature = <span class="keyword">new</span> jsrsasign.<span class="property">KJUR</span>.<span class="property">crypto</span>.<span class="title class_">Signature</span>(&#123;<span class="attr">alg</span>: <span class="string">&#x27;SHA256withRSA&#x27;</span>&#125;)</span><br><span class="line">  signature.<span class="title function_">init</span>(rsa)</span><br><span class="line">  signature.<span class="title function_">updateString</span>(paramString)</span><br><span class="line">  <span class="keyword">const</span> signResult = signature.<span class="title function_">sign</span>()</span><br><span class="line">  <span class="comment">// 4. 将签名转换为 Base64 编码</span></span><br><span class="line">  <span class="keyword">const</span> signBase64 = jsrsasign.<span class="title function_">hextob64</span>(signResult)</span><br><span class="line">  <span class="keyword">return</span> signBase64</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 公钥验签</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; signData 加签数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; data 加签之后得到的签文</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; publicKey 公钥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">verifyRSASign</span> = (<span class="params">signData, data, publicKey</span>) =&gt;&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> rsa = <span class="keyword">new</span> jsrsasign.<span class="title class_">RSAKey</span>()</span><br><span class="line">    rsa = jsrsasign.<span class="property">KEYUTIL</span>.<span class="title function_">getKey</span>(publicKey)</span><br><span class="line">    <span class="keyword">let</span> signatureVf = <span class="keyword">new</span> jsrsasign.<span class="property">KJUR</span>.<span class="property">crypto</span>.<span class="title class_">Signature</span>(&#123; </span><br><span class="line">      <span class="attr">alg</span>: <span class="string">&quot;SHA256withRSA&quot;</span>, </span><br><span class="line">      <span class="attr">prvkeypem</span>: rsa </span><br><span class="line">    &#125;)</span><br><span class="line">    signatureVf.<span class="title function_">updateString</span>(data)</span><br><span class="line">    <span class="keyword">let</span> result = signatureVf.<span class="title function_">verify</span>(jsrsasign.<span class="title function_">b64tohex</span>(signData))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;jsrsasign verify: &quot;</span> + result)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JSEncrypt加密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; data 加密对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; publicKey 公钥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getJSEncrypt</span> = (<span class="params">data,publicKey</span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> jsencrypt = <span class="keyword">new</span> <span class="title class_">JSEncrypt</span>()</span><br><span class="line">  jsencrypt.<span class="title function_">setPublicKey</span>(publicKey)</span><br><span class="line">  <span class="keyword">let</span> result = jsencrypt.<span class="title function_">encrypt</span>(data)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JSEncrypt解密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; data 解密对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; privateKey 私钥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getJSDecrypt</span> = (<span class="params">data,privateKey</span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> jsencrypt = <span class="keyword">new</span> <span class="title class_">JSEncrypt</span>()</span><br><span class="line">  jsencrypt.<span class="title function_">setPrivateKey</span>(privateKey)</span><br><span class="line">  <span class="keyword">let</span> result = jsencrypt.<span class="title function_">encrypt</span>(data)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Encrypt加密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; data 加密对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; publicKey 公钥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getEncrypt</span> = (<span class="params">data,publicKey</span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> encrypt = <span class="keyword">new</span> <span class="title class_">Encrypt</span>();</span><br><span class="line">  encrypt.<span class="title function_">setPublicKey</span>(publicKey);</span><br><span class="line">  <span class="keyword">let</span> result = encrypt.<span class="title function_">encryptLong</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data))</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Encrypt解密</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; data 解密对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; privateKey 私钥</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getDecrypt</span> = (<span class="params">data,privateKey</span>)=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> decrypt = <span class="keyword">new</span> <span class="title class_">Encrypt</span>();</span><br><span class="line">  decrypt.<span class="title function_">setPrivateKey</span>(privateKey);</span><br><span class="line">  <span class="keyword">let</span> result = decrypt.<span class="title function_">decryptLong</span>(data)</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;依赖 jsencrypt encryptlong jsrsasign npm库&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;</summary>
      
    
    
    
    <category term="工具" scheme="https://ovyvo.github.io/yanblog.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="JS" scheme="https://ovyvo.github.io/yanblog.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Vue2电池小图标</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2023/05/26/blog17/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2023/05/26/blog17/</id>
    <published>2023-05-25T16:00:00.000Z</published>
    <updated>2024-01-05T05:14:46.711Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>简单的电池小图标，根据电量展示不同的颜色。</p></blockquote><p><img src="https://img-blog.csdnimg.cn/4c1caaaa01784560a7829baadc5facd1.png" alt="在这里插入图片描述"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;battery-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;shell&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in batteryChunk&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">class</span>=<span class="string">&quot;block&quot;</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">:style</span>=<span class="string">&quot;&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">          background: `$&#123;batteryColor&#125;`</span></span></span></span><br><span class="line"><span class="string"><span class="tag"><span class="language-xml">        &#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">capacity</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">type</span>: [<span class="title class_">Number</span>,<span class="title class_">String</span>],</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">batteryChunk</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">findInterval</span>(<span class="variable language_">this</span>.<span class="property">capacity</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">batteryColor</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">batteryChunk</span> &gt;=<span class="number">0</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">batteryChunk</span> &lt;= <span class="number">1</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="string">&#x27;#FE5F69&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">batteryChunk</span> &gt; <span class="number">1</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">batteryChunk</span> &lt;=<span class="number">4</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="string">&#x27;#FFC95C&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;<span class="keyword">else</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> <span class="string">&#x27;#64BA8C&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">findInterval</span>(<span class="params">num</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> intervalSize = <span class="number">100</span> / <span class="number">6</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">var</span> interval = <span class="title class_">Math</span>.<span class="title function_">floor</span>(num / intervalSize)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="keyword">if</span> (interval === <span class="number">6</span>) &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> interval</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125; <span class="keyword">else</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> interval + <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&#x27;less&#x27;</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-class">.battery-container</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">48px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">24px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border</span>: <span class="number">4px</span> solid <span class="number">#DFE6EE</span> ;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">transform-origin</span>: left top;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &amp;<span class="selector-pseudo">:after</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">display</span>: block;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">height</span>: <span class="number">12px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>: <span class="number">4px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">background</span>:<span class="number">#DFE6EE</span> ;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">right</span>: -<span class="number">8px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin</span>: auto <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.shell</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">box-sizing</span>: border-box;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">padding</span>: <span class="number">2px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">background</span>: <span class="number">#F8FAFC</span> ;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">display</span>: grid;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">6</span>,<span class="number">1</span>fr);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">grid-column</span>-<span class="attribute">gap</span>: <span class="number">2px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="selector-class">.block</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;简单的电池小图标，根据电量展示不同的颜色。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/4c1caaaa01784560a7829baadc5facd1.png&quot; alt=&quot;</summary>
      
    
    
    
    <category term="组件" scheme="https://ovyvo.github.io/yanblog.github.io/categories/%E7%BB%84%E4%BB%B6/"/>
    
    
    <category term="vue-2" scheme="https://ovyvo.github.io/yanblog.github.io/tags/vue-2/"/>
    
  </entry>
  
  <entry>
    <title>Vue3 H5调用相机扫描二维码</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2023/05/23/blog16/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2023/05/23/blog16/</id>
    <published>2023-05-22T16:00:00.000Z</published>
    <updated>2023-07-08T07:32:07.355Z</updated>
    
    <content type="html"><![CDATA[<ol><li>使用第三方库<br>目前比较流行的扫描二维码库有zxing-js、quaggaJS、Html5Qrcode等，可以在Vue3项目中安装并使用这些库来实现扫描二维码功能。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install zxing-js</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BrowserQRCodeReader</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;@zxing/library&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> codeReader = <span class="keyword">new</span> <span class="title class_">BrowserQRCodeReader</span>();</span><br><span class="line">codeReader.<span class="title function_">decodeFromInputVideoDevice</span>(<span class="literal">undefined</span>, <span class="string">&#x27;video&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">text</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li>使用浏览器原生API<br>现代浏览器提供了WebRTC API，可以使用getUserMedia方法获取摄像头视频流，再使用Canvas API将视频流渲染到画布上，最后使用jsQR库解析二维码。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jsqr</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jsQR <span class="keyword">from</span> <span class="string">&#x27;jsqr&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">navigator.<span class="property">mediaDevices</span>.<span class="title function_">getUserMedia</span>(&#123; <span class="attr">video</span>: <span class="literal">true</span> &#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">stream</span>) =&gt;</span> &#123;</span><br><span class="line">  video.<span class="property">srcObject</span> = stream;</span><br><span class="line">  video.<span class="title function_">play</span>();</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">scanQRCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">  ctx.<span class="title function_">drawImage</span>(video, <span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span><br><span class="line">  <span class="keyword">const</span> imageData = ctx.<span class="title function_">getImageData</span>(<span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span><br><span class="line">  <span class="keyword">const</span> code = <span class="title function_">jsQR</span>(imageData.<span class="property">data</span>, imageData.<span class="property">width</span>, imageData.<span class="property">height</span>);</span><br><span class="line">  <span class="keyword">if</span> (code) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(code.<span class="property">data</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(scanQRCode, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">scanQRCode</span>();</span><br></pre></td></tr></table></figure><blockquote><p>需要注意的是，getUserMedia方法需要在https或localhost环境下才能正常使用，否则会报错。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;使用第三方库&lt;br&gt;目前比较流行的扫描二维码库有zxing-js、quaggaJS、Html5Qrcode等，可以在Vue3项目中安装并使用这些库来实现扫描二维码功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript</summary>
      
    
    
    
    <category term="vue" scheme="https://ovyvo.github.io/yanblog.github.io/categories/vue/"/>
    
    
    <category term="vue-3" scheme="https://ovyvo.github.io/yanblog.github.io/tags/vue-3/"/>
    
  </entry>
  
  <entry>
    <title>Vue3核心模块及虚拟DOM</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2023/03/01/blog15/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2023/03/01/blog15/</id>
    <published>2023-02-28T16:00:00.000Z</published>
    <updated>2023-07-08T07:32:07.354Z</updated>
    
    <content type="html"><![CDATA[<style>  img[alt="img"]{    width:500px;  }</style><h2 id="vue3三个核心模块"><a href="#vue3三个核心模块" class="headerlink" title="vue3三个核心模块"></a>vue3三个核心模块</h2><h3 id="Reactive-Module"><a href="#Reactive-Module" class="headerlink" title="Reactive Module"></a>Reactive Module</h3><ul><li>跟踪、观察变化并做出响应的改变</li></ul><h3 id="Compiler-Module"><a href="#Compiler-Module" class="headerlink" title="Compiler Module"></a>Compiler Module</h3><ul><li>获取HTML模板并将其编译成渲染函数</li></ul><h3 id="Render-Module"><a href="#Render-Module" class="headerlink" title="Render Module"></a>Render Module</h3><ul><li>Render Phase：返回虚拟节点</li><li>Mount Phase：使用虚拟节点创建页面</li><li>Patch Phase：以补丁的形式更新页面</li></ul><p><img src="https://img-blog.csdnimg.cn/1f20cf141c6c4fa4a5529689681095bd.png" alt="img"></p><h2 id="组件执行过程中Vue的操作"><a href="#组件执行过程中Vue的操作" class="headerlink" title="组件执行过程中Vue的操作"></a>组件执行过程中Vue的操作</h2><h3 id="编译模块将HTML转换成一个渲染函数"><a href="#编译模块将HTML转换成一个渲染函数" class="headerlink" title="编译模块将HTML转换成一个渲染函数"></a>编译模块将HTML转换成一个渲染函数</h3><p><img src="https://img-blog.csdnimg.cn/47ebd4d96d874e57b0808618a29bce2f.png" alt="img"></p><h3 id="初始化响应式对象使用响应式模块"><a href="#初始化响应式对象使用响应式模块" class="headerlink" title="初始化响应式对象使用响应式模块"></a>初始化响应式对象使用响应式模块</h3><p><img src="https://img-blog.csdnimg.cn/85abd8f248874d2eb0ad011b14474ee6.png" alt="img"></p><h3 id="进入Render渲染阶段"><a href="#进入Render渲染阶段" class="headerlink" title="进入Render渲染阶段"></a>进入Render渲染阶段</h3><h4 id="调用render函数，引用响应式对象，观察对象变化，render返回一个虚拟DOM节点"><a href="#调用render函数，引用响应式对象，观察对象变化，render返回一个虚拟DOM节点" class="headerlink" title="调用render函数，引用响应式对象，观察对象变化，render返回一个虚拟DOM节点"></a>调用render函数，引用响应式对象，观察对象变化，render返回一个虚拟DOM节点</h4><p><img src="https://img-blog.csdnimg.cn/bc05fcb977524e9a975e1505db028bce.png" alt="img"></p><h4 id="使用虚拟节点创建web界面"><a href="#使用虚拟节点创建web界面" class="headerlink" title="使用虚拟节点创建web界面"></a>使用虚拟节点创建web界面</h4><p><img src="https://img-blog.csdnimg.cn/25a348db16454838990f39a0140eb1a4.png" alt="img"></p><h4 id="如果响应对象发生变化，再次调用render创建虚拟DOM节点，新旧节点对比发送补丁更新页面"><a href="#如果响应对象发生变化，再次调用render创建虚拟DOM节点，新旧节点对比发送补丁更新页面" class="headerlink" title="如果响应对象发生变化，再次调用render创建虚拟DOM节点，新旧节点对比发送补丁更新页面"></a>如果响应对象发生变化，再次调用render创建虚拟DOM节点，新旧节点对比发送补丁更新页面</h4><p><img src="https://img-blog.csdnimg.cn/77fd1a38cafc4d9bba3b4e90d70e0409.png" alt="img"></p><h2 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h2><h3 id="虚拟DOM优点"><a href="#虚拟DOM优点" class="headerlink" title="虚拟DOM优点"></a>虚拟DOM优点</h3><ol><li>保证性能下限：虚拟DOM需要适配任何上层API可能产生的操作，DOM操作的实现必须是普适的，因此虚拟DOM的性能并不是最优的，但是相较于直接操作DOM性能还是要好很多，因此框架的虚拟DOM可以保证不需要手动优化情况下提供还不错的功能，即保证性能下限。</li><li>无需手动操作DOM：无需手动操作DOM，只需要写好View-Model代码逻辑，框架会处理好数据与DOM的双向绑定，帮助我们以可预期的方式更新视图，极大程度的提高开发效率。</li><li>跨平台：虚拟DOM本质上就是js的对象，而DOM与平台强相关，相比之下虚拟DOM可以进行更方便的跨平台操作。</li></ol><h3 id="虚拟DOM的缺点"><a href="#虚拟DOM的缺点" class="headerlink" title="虚拟DOM的缺点"></a>虚拟DOM的缺点</h3><ol><li>无法禁止极致优化：虽然虚拟DOM+合理的优化可以应对大部分应用的性能需求，但是在一些性能要求极高的应用中虚拟DOM无法进行针对性的极致优化。</li><li>需要额外的创建函数，如createElement或者h函数。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
  img[alt=&quot;img&quot;]{
    width:500px;
  }
&lt;/style&gt;


&lt;h2 id=&quot;vue3三个核心模块&quot;&gt;&lt;a href=&quot;#vue3三个核心模块&quot; class=&quot;headerlink&quot; title=&quot;vue3三个核心模块&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="vue" scheme="https://ovyvo.github.io/yanblog.github.io/categories/vue/"/>
    
    
    <category term="vue-3" scheme="https://ovyvo.github.io/yanblog.github.io/tags/vue-3/"/>
    
  </entry>
  
  <entry>
    <title>Promise概述及应用</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2023/02/20/blog14/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2023/02/20/blog14/</id>
    <published>2023-02-19T16:00:00.000Z</published>
    <updated>2023-07-08T07:32:07.354Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Promise概述"><a href="#1-Promise概述" class="headerlink" title="1.Promise概述"></a>1.Promise概述</h3><p>Promise是异步编程的解决方案。简单来说是一个容器，里面保存了异步操作的结果。Promise有如下特点：</p><ol><li>对象内部状态不受外界环境影响。promise仅有三种状态pending(进行中)、fulfilled(已成功)、rejected(已失败)。只有异步操作的结果可以决定当前属于哪一种状态。</li><li>状态一旦确定就无法改变，任何时候都可以得到这个结果。promise的结果改变只有两种状态：从pending-&gt;fulfilled、从pending-&gt;rejected。只要这两个状态发生就无法改变。<br>Promise的缺点：</li><li>无法取消Promise,一旦新建就会立即执行，无法中途取消。</li><li>如果不设置回调函数，promise内部抛出的错误无法被外界捕获。</li><li>当处于pending状态时，无法得知目前进展到哪一阶段。</li></ol><p><strong>注意：在构造Promise的时候，构造函数内部的代码是立即执行的。</strong></p><h3 id="2-基本用法"><a href="#2-基本用法" class="headerlink" title="2.基本用法"></a>2.基本用法</h3><ul><li><p>通常使用new Promise构造一个新的promise函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>then()方法：接收两个回调函数，一个作为resolve状态回调，一个作为reject回调</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// value</span></span><br><span class="line">&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err) <span class="comment">// error</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>catch()方法：接收一个回调函数，用来指定发生错误时的函数。相当于then方法的第二个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res) <span class="comment">// value</span></span><br><span class="line">&#125;)</span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(err) <span class="comment">// error</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>finally()方法：用于指定不管Promise对象最后状态如何，都会执行的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">promise</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;···&#125;)</span><br><span class="line">.<span class="title function_">finally</span>(<span class="function">() =&gt;</span> &#123;···&#125;)</span><br></pre></td></tr></table></figure></li><li><p>all()方法：用于将多个Promise实例包装成一个新的Promise实例。只有多个Promise的返回状态都为resolve时新的Promise状态才为resolve,任意一个Promise状态为reject时新Promise状态为reject。如果参数Promise定义了自己的catch方法，那么一旦被rejected不会触发Promise.all()的catch方法。如果参数Promise没有自己的catch方法，则调用Promise.all()的catch方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;报错了&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> result)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> e);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2])</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e));</span><br><span class="line"><span class="comment">// [&quot;hello&quot;, Error: 报错了]</span></span><br></pre></td></tr></table></figure></li><li><p>race()方法：同样是将多个Promise实例包装成一个新Promise实例，与all不同的是：某一个参数Promise先改变状态，则返回率先改变的那个Promise的返回值，直接结束包装实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure></li><li><p>any()方法：只要有一个参数实例变成fulfilled状态，包装实例变成fulfilled状态，如果所有的实例都变成rejected状态，包装实例会变成rejected状态。与race方法类似，区别是：Promise.any()不会因为某个Promise变成rejected状态而结束，必须等到所有参数的Promise变成rejected状态才结束。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">any</span>([p1, p2, p3]);</span><br></pre></td></tr></table></figure></li><li><p>resolve()方法：将现有对象转化为Promise对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> <span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>))</span><br></pre></td></tr></table></figure><p>resolve参数分四种情况：</p><ol><li><p>参数是一个Promise实例：Promise.resolve不做任何修改、原封不动返回这个实例。</p></li><li><p>参数是一个thenable对象(具有then方法的对象)：Promise.resolve()方法会将这个对象转为Promise对象，然后立即执行thenable对象的then()方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> thenable = &#123;</span><br><span class="line">  <span class="attr">then</span>: <span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">42</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(thenable);</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value);  <span class="comment">// 42</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>参数不是具有then()方法的对象，或根本就不是对象：如果参数是一个原始值，或者是一个不具有then()方法的对象，则Promise.resolve()方法返回一个新的 Promise 对象，状态为resolved。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// Hello</span></span><br></pre></td></tr></table></figure></li><li><p>不带有任何参数:Promise.resolve()方法允许调用时不带参数，直接返回一个resolved状态的 Promise 对象。需要注意的是，立即resolve()的 Promise 对象，是在本轮“事件循环”（event loop）的结束时执行，而不是在下一轮“事件循环”的开始时。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;three&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;two&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;one&#x27;</span>);</span><br><span class="line"><span class="comment">// one</span></span><br><span class="line"><span class="comment">// two</span></span><br><span class="line"><span class="comment">// three</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>reject()方法：返回一个新的 Promise 实例，该实例的状态为rejected。</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> <span class="title function_">reject</span>(<span class="string">&#x27;出错了&#x27;</span>))</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="literal">null</span>, <span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出错了</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-Promise概述&quot;&gt;&lt;a href=&quot;#1-Promise概述&quot; class=&quot;headerlink&quot; title=&quot;1.Promise概述&quot;&gt;&lt;/a&gt;1.Promise概述&lt;/h3&gt;&lt;p&gt;Promise是异步编程的解决方案。简单来说是一个容器，里面保存了异</summary>
      
    
    
    
    <category term="ES6" scheme="https://ovyvo.github.io/yanblog.github.io/categories/ES6/"/>
    
    
    <category term="JS" scheme="https://ovyvo.github.io/yanblog.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Reflect概述及应用</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2023/02/14/blog12/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2023/02/14/blog12/</id>
    <published>2023-02-13T16:00:00.000Z</published>
    <updated>2023-07-08T07:32:07.354Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Reflect概述"><a href="#Reflect概述" class="headerlink" title="Reflect概述"></a>Reflect概述</h3><p>Reflect是ES6提供的操作对象的Api,其主要目的有</p><ul><li> 将Object对象的一些明显属于语言内部的方法（比如Object.defineProperty），放到Reflect对象上。现阶段，某些方法同时在Object和Reflect对象上部署，未来的新方法将只部署在Reflect对象上。也就是说，从Reflect对象上可以拿到语言内部的方法。</li><li>修改某些Object方法的返回结果，让其变得更合理。比如，Object.defineProperty(obj, name, desc)在无法定义属性时，会抛出一个错误，而Reflect.defineProperty(obj, name, desc)则会返回false。</li><li>让Object操作都变成函数行为。某些Object操作是命令式，比如name in obj和delete obj[name]，而Reflect.has(obj, name)和Reflect.deleteProperty(obj, name)让它们变成了函数行为。</li><li>Reflect对象的方法与Proxy对象的方法一一对应，只要是Proxy对象的方法，就能在Reflect对象上找到对应的方法。这就让Proxy对象可以方便地调用对应的Reflect方法，完成默认行为，作为修改行为的基础。</li></ul><h3 id="Reflect静态方法"><a href="#Reflect静态方法" class="headerlink" title="Reflect静态方法"></a>Reflect静态方法</h3><ul><li>Reflect.get(target,name,receiver):查找并返回target对象的name属性，如果没有该属性返回undefined</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">bar</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">baz</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">foo</span> + <span class="variable language_">this</span>.<span class="property">bar</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myReceiverObject = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="attr">bar</span>: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// Reflect.get的第一个参数不是对象会报错</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">get</span>(myObject, <span class="string">&#x27;foo&#x27;</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">get</span>(myObject, <span class="string">&#x27;bar&#x27;</span>) <span class="comment">// 2</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">get</span>(myObject, <span class="string">&#x27;baz&#x27;</span>) <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 如果有reciver参数则getter的this绑定receiver</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">get</span>(myObject, <span class="string">&#x27;baz&#x27;</span>, myReceiverObject) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><ul><li>Reflect.set(target,name,value,receiver):设置对象的name属性值为value</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">4</span>,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">bar</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">foo</span> = value;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myReceiverObject = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">0</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">set</span>(myObject, <span class="string">&#x27;bar&#x27;</span>, <span class="number">1</span>, myReceiverObject);</span><br><span class="line">myObject.<span class="property">foo</span> <span class="comment">// 4</span></span><br><span class="line">myReceiverObject.<span class="property">foo</span> <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>Reflect.has(obj,name):判断obj对象是否包含name属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧写法</span></span><br><span class="line"><span class="string">&#x27;foo&#x27;</span> <span class="keyword">in</span> myObject <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">has</span>(myObject, <span class="string">&#x27;foo&#x27;</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>Reflect.deleteProperty(obj, name):等同于delete obj[name]方法，删除对象的name属性值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧写法</span></span><br><span class="line"><span class="keyword">delete</span> myObj.<span class="property">foo</span>;</span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(myObj, <span class="string">&#x27;foo&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>Reflect.construct(target,args):等同于new target(…args)提供了一种不使用new调用构造函数的方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Greeting</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// new 的写法</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">Greeting</span>(<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="comment">// Reflect.construct 的写法</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="title class_">Reflect</span>.<span class="title function_">construct</span>(<span class="title class_">Greeting</span>, [<span class="string">&#x27;张三&#x27;</span>]);</span><br></pre></td></tr></table></figure><ul><li>Reflect.apply(func,thisArg,args):等同于Function.prototype.apply.call(func,thisArg,args)用于绑定this对象后执行给定函数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ages = [<span class="number">11</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">96</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧写法</span></span><br><span class="line"><span class="keyword">const</span> youngest = <span class="title class_">Math</span>.<span class="property">min</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> oldest = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> type = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(youngest);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="keyword">const</span> youngest = <span class="title class_">Reflect</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>.<span class="property">min</span>, <span class="title class_">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> oldest = <span class="title class_">Reflect</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>.<span class="property">max</span>, <span class="title class_">Math</span>, ages);</span><br><span class="line"><span class="keyword">const</span> type = <span class="title class_">Reflect</span>.<span class="title function_">apply</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>, youngest, []);</span><br></pre></td></tr></table></figure><ul><li>Reflect.ownKeys(target):返回对象的所有属性，等同于Object.getOwnPropertyNames与Object.getOwnPropertySymbols之和</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObject = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">bar</span>: <span class="number">2</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;baz&#x27;</span>)]: <span class="number">3</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;bing&#x27;</span>)]: <span class="number">4</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 旧写法</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(myObject)</span><br><span class="line"><span class="comment">// [&#x27;foo&#x27;, &#x27;bar&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(myObject)</span><br><span class="line"><span class="comment">//[Symbol(baz), Symbol(bing)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 新写法</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(myObject)</span><br><span class="line"><span class="comment">// [&#x27;foo&#x27;, &#x27;bar&#x27;, Symbol(baz), Symbol(bing)]</span></span><br></pre></td></tr></table></figure><ul><li>其他Api参见 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">CDN-Reflect</a></li></ul><h3 id="实例：使用Proxy和Reflect实现观察者模式"><a href="#实例：使用Proxy和Reflect实现观察者模式" class="headerlink" title="实例：使用Proxy和Reflect实现观察者模式"></a>实例：使用Proxy和Reflect实现观察者模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 观察目标</span></span><br><span class="line"><span class="keyword">const</span> person = <span class="title function_">observable</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 观察者</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;person.name&#125;</span>, <span class="subst">$&#123;person.age&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">observe</span>(print);</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 李四, 20</span></span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queuedObservers = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">observe</span> = fn =&gt; queuedObservers.<span class="title function_">add</span>(fn);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">observable</span> = obj =&gt; <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;set&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver);</span><br><span class="line">  queuedObservers.<span class="title function_">forEach</span>(<span class="function"><span class="params">observer</span> =&gt;</span> <span class="title function_">observer</span>());</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Reflect概述&quot;&gt;&lt;a href=&quot;#Reflect概述&quot; class=&quot;headerlink&quot; title=&quot;Reflect概述&quot;&gt;&lt;/a&gt;Reflect概述&lt;/h3&gt;&lt;p&gt;Reflect是ES6提供的操作对象的Api,其主要目的有&lt;/p&gt;
&lt;ul&gt;
&lt;li</summary>
      
    
    
    
    <category term="ES6" scheme="https://ovyvo.github.io/yanblog.github.io/categories/ES6/"/>
    
    
    <category term="JS" scheme="https://ovyvo.github.io/yanblog.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Proxy概述及应用</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2023/02/14/blog13/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2023/02/14/blog13/</id>
    <published>2023-02-13T16:00:00.000Z</published>
    <updated>2023-07-08T07:32:07.354Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-proxy概述"><a href="#1-proxy概述" class="headerlink" title="1.proxy概述"></a>1.proxy概述</h3><p>用于在修改某些操作的默认行为，可理解为在目标之前架设一层拦截器，外界所有的访问都要通过该拦截器，可以对访问做出过滤和改写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);<span class="comment">// target:拦截对象 handler:对象，定义拦截行为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, propKey, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`getting <span class="subst">$&#123;propKey&#125;</span>!`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, propKey, receiver);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, propKey, value, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`setting <span class="subst">$&#123;propKey&#125;</span>!`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, propKey, value, receiver);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.<span class="property">count</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">//  setting count!</span></span><br><span class="line">++obj.<span class="property">count</span></span><br><span class="line"><span class="comment">//  getting count!</span></span><br><span class="line"><span class="comment">//  setting count!</span></span><br><span class="line"><span class="comment">//  2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-proxy拦截操作"><a href="#2-proxy拦截操作" class="headerlink" title="2.proxy拦截操作"></a>2.proxy拦截操作</h3><ol><li>get(target, propKey, receiver)：拦截对象属性的读取，比如proxy.foo和proxy[‘foo’]。</li><li>set(target, propKey, value, receiver)：拦截对象属性的设置，比如proxy.foo = v或proxy[‘foo’] = v，返回一个布尔值。</li><li>has(target, propKey)：拦截propKey in proxy的操作，返回一个布尔值。</li><li>deleteProperty(target, propKey)：拦截delete proxy[propKey]的操作，返回一个布尔值。</li><li>ownKeys(target)：拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for…in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。</li><li>getOwnPropertyDescriptor(target, propKey)：拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。</li><li>defineProperty(target, propKey, propDesc)：拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。</li><li>preventExtensions(target)：拦截Object.preventExtensions(proxy)，返回一个布尔值。</li><li>getPrototypeOf(target)：拦截Object.getPrototypeOf(proxy)，返回一个对象。</li><li>isExtensible(target)：拦截Object.isExtensible(proxy)，返回一个布尔值。</li><li>setPrototypeOf(target, proto)：拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</li><li>apply(target, object, args)：拦截 Proxy 实例作为函数调用的操作，比如proxy(…args)、proxy.call(object, …args)、proxy.apply(…)。</li><li>construct(target, args)：拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(…args)。</li></ol><h3 id="3-proxy常用实例方法"><a href="#3-proxy常用实例方法" class="headerlink" title="3.proxy常用实例方法"></a>3.proxy常用实例方法</h3><ol><li>get():用于拦截某个属性的读取操作，可接受三个参数。目标对象、属性名、proxy实例本身(可选)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, propKey</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (propKey <span class="keyword">in</span> target) &#123;</span><br><span class="line">      <span class="keyword">return</span> target[propKey];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReferenceError</span>(<span class="string">&quot;Prop name \&quot;&quot;</span> + propKey + <span class="string">&quot;\&quot; does not exist.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.<span class="property">name</span> <span class="comment">// &quot;张三&quot;</span></span><br><span class="line">proxy.<span class="property">age</span> <span class="comment">// 抛出一个错误</span></span><br></pre></td></tr></table></figure><ol start="2"><li>set():用来拦截某个属性的赋值操作，接收四个参数。目标对象、属性名、属性值、proxy实例本身(可选)</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> validator = &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">obj, prop, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">&#x27;age&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(value)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&#x27;The age is not an integer&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&#x27;The age seems invalid&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 对于满足条件的 age 属性以及其他属性，直接保存</span></span><br><span class="line">    obj[prop] = value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, validator);</span><br><span class="line"></span><br><span class="line">person.<span class="property">age</span> = <span class="number">100</span>;</span><br><span class="line">person.<span class="property">age</span> <span class="comment">// 100</span></span><br><span class="line">person.<span class="property">age</span> = <span class="string">&#x27;young&#x27;</span> <span class="comment">// 报错</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">300</span> <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><p>3.apply():拦截函数的调用、call、apply操作，接收三个参数。目标对象、目标对象的上下文对象、目标对象的参数数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twice = &#123;</span><br><span class="line">  apply (target, ctx, args) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">apply</span>(...<span class="variable language_">arguments</span>) * <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span> (left, right) &#123;</span><br><span class="line">  <span class="keyword">return</span> left + right;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(sum, twice);</span><br><span class="line"><span class="title function_">proxy</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 6</span></span><br><span class="line">proxy.<span class="title function_">call</span>(<span class="literal">null</span>, <span class="number">5</span>, <span class="number">6</span>) <span class="comment">// 22</span></span><br><span class="line">proxy.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">7</span>, <span class="number">8</span>]) <span class="comment">// 30</span></span><br></pre></td></tr></table></figure><ol start="4"><li>has():拦截HasProperty操作，判断对象是否有某个属性，即in运算符，接收两个参数。目标对象、需查询属性名。has对for in遍历不拦截。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  has (target, key) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> target;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">&#x27;foo&#x27;</span>, <span class="attr">prop</span>: <span class="string">&#x27;foo&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="string">&#x27;_prop&#x27;</span> <span class="keyword">in</span> proxy <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ol start="5"><li>construct():用于拦截new命令，接收三个参数。目标对象、构造函数的参数数组、创造实例参数时，new命令作用的构造函数。注意，construct必须返回一个对象，否则会报错。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">construct</span>: <span class="keyword">function</span>(<span class="params">target, args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;called: &#x27;</span> + args.<span class="title function_">join</span>(<span class="string">&#x27;, &#x27;</span>));</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">value</span>: args[<span class="number">0</span>] * <span class="number">10</span> &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// p即为第三个参数</span></span><br><span class="line">(<span class="keyword">new</span> <span class="title function_">p</span>(<span class="number">1</span>)).<span class="property">value</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="attr">construct</span>: <span class="keyword">function</span>(<span class="params">target, args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === handler); <span class="comment">// this指向proxy配置的拦截对象</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">target</span>(...args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;, handler);</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">p</span>() <span class="comment">// true</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>deleteProperty():用于拦截delete操作，接收两个参数。目标对象、删除key值。如果方法抛出错误或者返回false说明当前属性无法被delete删除。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  deleteProperty (target, key) &#123;</span><br><span class="line">    <span class="title function_">invariant</span>(key, <span class="string">&#x27;delete&#x27;</span>);</span><br><span class="line">    <span class="keyword">delete</span> target[key];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invariant</span> (key, action) &#123;</span><br><span class="line">  <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Invalid attempt to <span class="subst">$&#123;action&#125;</span> private &quot;<span class="subst">$&#123;key&#125;</span>&quot; property`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_prop</span>: <span class="string">&#x27;foo&#x27;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line"><span class="keyword">delete</span> proxy.<span class="property">_prop</span></span><br><span class="line"><span class="comment">// Error: Invalid attempt to delete private &quot;_prop&quot; property</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-proxy概述&quot;&gt;&lt;a href=&quot;#1-proxy概述&quot; class=&quot;headerlink&quot; title=&quot;1.proxy概述&quot;&gt;&lt;/a&gt;1.proxy概述&lt;/h3&gt;&lt;p&gt;用于在修改某些操作的默认行为，可理解为在目标之前架设一层拦截器，外界所有的访问都要通</summary>
      
    
    
    
    <category term="ES6" scheme="https://ovyvo.github.io/yanblog.github.io/categories/ES6/"/>
    
    
    <category term="JS" scheme="https://ovyvo.github.io/yanblog.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Generator函数及Async/Await</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2023/02/13/blog11/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2023/02/13/blog11/</id>
    <published>2023-02-12T16:00:00.000Z</published>
    <updated>2023-07-08T07:32:07.354Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-Generator函数"><a href="#1-Generator函数" class="headerlink" title="1.Generator函数"></a>1.Generator函数</h3><p>Generator函数是ES6中提供的一种异步编程解决方法。Generator是一个状态机，可以依次遍历函数内部的没一个状态。简单可以理解为一个可暂停执行的函数，yield就是暂停标志。</p><ul><li>function后面有”*”</li><li>函数内部有yield表达式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">functon * <span class="title function_">call</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;1&#x27;</span></span><br><span class="line">  consol.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;2&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Generator函数执行机制"><a href="#2-Generator函数执行机制" class="headerlink" title="2.Generator函数执行机制"></a>2.Generator函数执行机制</h3><p>使用generator函数和使用普通函数一样，在后面加上()就可以了,但是函数并不会马上执行，而是返回一个指向内部函数的指针，调用遍历器对象Iterator的next方法，会分步执行generator函数中的对应逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> f = call</span><br><span class="line">f.<span class="title function_">next</span>() </span><br><span class="line"><span class="comment">//console =&gt; 1</span></span><br><span class="line"><span class="comment">//yield =&gt; &#123;value: &#x27;1&#x27;, done: false&#125; </span></span><br><span class="line">f.<span class="title function_">next</span>() </span><br><span class="line"><span class="comment">//console =&gt; 2</span></span><br><span class="line"><span class="comment">//yield =&gt; &#123;value: &#x27;2&#x27;, done: false&#125; </span></span><br><span class="line">f.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">//yield =&gt; &#123;value: undefined, done: true&#125; </span></span><br></pre></td></tr></table></figure><h3 id="3-next方法"><a href="#3-next方法" class="headerlink" title="3.next方法"></a>3.next方法</h3><p>next函数不传入参数时yield表达式返回值是undefined，当next传入参数的时候参数会作为上一步yield的返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">functon * <span class="title function_">call2</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> a = <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">  consol.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f2 = <span class="title function_">call2</span>()</span><br><span class="line"></span><br><span class="line">f2.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">//console =&gt; &#x27;开始&#x27;</span></span><br><span class="line">f2.<span class="title function_">next</span>(<span class="number">10</span>)</span><br><span class="line"><span class="comment">//console =&gt; (10)</span></span><br><span class="line"><span class="comment">//yield =&gt; &#123;value: 1, done: false&#125;</span></span><br><span class="line">f2.<span class="title function_">next</span>(<span class="number">20</span>)</span><br><span class="line"><span class="comment">//console =&gt; (20)</span></span><br><span class="line"><span class="comment">//yield =&gt; &#123;value: 2, done: false&#125;</span></span><br><span class="line">f2.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">//yield =&gt; &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h3 id="4-return方法"><a href="#4-return方法" class="headerlink" title="4.return方法"></a>4.return方法</h3><p>return返回给定值并结束遍历Generator函数。return有参数返回参数没参数返回undefined。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">functon * <span class="title function_">call3</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;开始&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> a = <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">  consol.<span class="title function_">log</span>(a)</span><br><span class="line">  <span class="keyword">const</span> b = <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> f3 = <span class="title function_">call3</span>()</span><br><span class="line"></span><br><span class="line">f3.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">//console =&gt; &#x27;开始&#x27;</span></span><br><span class="line">f3.<span class="title function_">next</span>(<span class="number">10</span>)</span><br><span class="line"><span class="comment">//console =&gt; (10)</span></span><br><span class="line"><span class="comment">//yield =&gt; &#123;value: 1, done: false&#125;</span></span><br><span class="line">f3.<span class="keyword">return</span>(<span class="string">&quot;end&quot;</span>)</span><br><span class="line"><span class="comment">//yield =&gt; &#123;value: &quot;end&quot;, done: true&#125;</span></span><br><span class="line">f3.<span class="title function_">next</span>()</span><br><span class="line"><span class="comment">//yield =&gt; &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure><h3 id="5-yield"><a href="#5-yield" class="headerlink" title="5.*yield"></a>5.*yield</h3><p>*yield表示yield返回另一个Generator对象,可以在Generator内部调用另一个Generator函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">callA</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;callA: &quot;</span> + (<span class="keyword">yield</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">callerB</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span>* <span class="title function_">callA</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> callerObj = <span class="title function_">callerB</span>()</span><br><span class="line">callerObj.<span class="title function_">next</span>()</span><br><span class="line">callerObj.<span class="title function_">next</span>(<span class="string">&quot;first&quot;</span>) <span class="comment">// console =&gt; callA :first</span></span><br><span class="line">callerObj.<span class="title function_">next</span>(<span class="string">&quot;second&quot;</span>) <span class="comment">// console =&gt; callA :second</span></span><br></pre></td></tr></table></figure><h3 id="6-async-await"><a href="#6-async-await" class="headerlink" title="6.async/await"></a>6.async/await</h3><p>ES7中引入，可以理解为Generator的语法糖，对Generator函数进行了修改。await等待的是一个隐式返回Promise作为结果的函数。async、await等同于一个generator+自动执行器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(nums * <span class="number">2</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> num1 = <span class="keyword">yield</span> <span class="title function_">fn</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num1) <span class="comment">// 2</span></span><br><span class="line">  <span class="keyword">const</span> num2 = <span class="keyword">yield</span> <span class="title function_">fn</span>(num1)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num2) <span class="comment">// 4</span></span><br><span class="line">  <span class="keyword">const</span> num3 = <span class="keyword">yield</span> <span class="title function_">fn</span>(num2)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num3) <span class="comment">// 8</span></span><br><span class="line">  <span class="keyword">return</span> num3</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generatorToAsync</span>(<span class="params">generatorFn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> gen = generatorFn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>) <span class="comment">// gen有可能传参</span></span><br><span class="line">    <span class="comment">// 返回一个Promise</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">function</span> <span class="title function_">go</span>(<span class="params">key, arg</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> res</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          res = gen[key](arg) <span class="comment">// 这里有可能会执行返回reject状态的Promise</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">reject</span>(error) <span class="comment">// 报错的话会走catch，直接reject</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 解构获得value和done</span></span><br><span class="line">        <span class="keyword">const</span> &#123; value, done &#125; = res</span><br><span class="line">        <span class="keyword">if</span> (done) &#123;</span><br><span class="line">          <span class="comment">// 如果done为true，说明走完了，进行resolve(value)</span></span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">resolve</span>(value)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 如果done为false，说明没走完，还得继续走</span></span><br><span class="line">          <span class="comment">// value有可能是：常量，Promise，Promise有可能是成功或者失败</span></span><br><span class="line">          <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(value).<span class="title function_">then</span>(<span class="function"><span class="params">val</span> =&gt;</span> <span class="title function_">go</span>(<span class="string">&#x27;next&#x27;</span>, val), <span class="function"><span class="params">err</span> =&gt;</span> <span class="title function_">go</span>(<span class="string">&#x27;throw&#x27;</span>, err))</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">go</span>(<span class="string">&quot;next&quot;</span>) <span class="comment">// 第一次执行</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> asyncFn = <span class="title function_">generatorToAsync</span>(gen)</span><br><span class="line"><span class="title function_">asyncFn</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-Generator函数&quot;&gt;&lt;a href=&quot;#1-Generator函数&quot; class=&quot;headerlink&quot; title=&quot;1.Generator函数&quot;&gt;&lt;/a&gt;1.Generator函数&lt;/h3&gt;&lt;p&gt;Generator函数是ES6中提供的一种异步编程解</summary>
      
    
    
    
    <category term="ES6" scheme="https://ovyvo.github.io/yanblog.github.io/categories/ES6/"/>
    
    
    <category term="JS" scheme="https://ovyvo.github.io/yanblog.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>一行代码-网站变灰</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2022/12/01/blog10/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2022/12/01/blog10/</id>
    <published>2022-11-30T16:00:00.000Z</published>
    <updated>2023-07-08T07:32:07.354Z</updated>
    
    <content type="html"><![CDATA[<h3 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h3><blockquote><p>在出现一些突发情况下需要快速将web端页面变灰的需求的时候，仅用一个属性即可让整个项目实现：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter: grayscale(1) // 参数为0-1的数值</span><br></pre></td></tr></table></figure><p>在body内联样式添加如下代码实现全站变灰</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">&quot;filter:grayscale(1);-webkit-filter:grayscale(1)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;功能实现&quot;&gt;&lt;a href=&quot;#功能实现&quot; class=&quot;headerlink&quot; title=&quot;功能实现&quot;&gt;&lt;/a&gt;功能实现&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;在出现一些突发情况下需要快速将web端页面变灰的需求的时候，仅用一个属性即可让整个项目实现：&lt;/p</summary>
      
    
    
    
    <category term="CSS" scheme="https://ovyvo.github.io/yanblog.github.io/categories/CSS/"/>
    
    
    <category term="样式" scheme="https://ovyvo.github.io/yanblog.github.io/tags/%E6%A0%B7%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>commitlint+husky+commitizen+lint-stage代码风格及上传规范管理</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2022/11/08/blog9/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2022/11/08/blog9/</id>
    <published>2022-11-07T16:00:00.000Z</published>
    <updated>2023-07-08T07:32:07.355Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>紧接上文说到vite+vue3代码风格及格式化操作，前文主要针对本地化配置格式化。为了更加规范仓库代码，本文引入介绍commitlint等工具，在代码commit的时候再次校验为代码规范再上一层保障。</p></blockquote><h3 id="安装commitlint及commitlint配置包"><a href="#安装commitlint及commitlint配置包" class="headerlink" title="安装commitlint及commitlint配置包"></a>安装commitlint及commitlint配置包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @commitlint/cli  @commitlint/config-conventional -D</span><br></pre></td></tr></table></figure><blockquote><p>添加@commitlint/config-conventional包的目的是使用基础配置，另外也可根据实际需要添加配置文件。例如：commitlint.config.js、.commitlintrc.js、.commitlintrc、.commitlintrc.json、.commitlintrc.yml或package.json中的commit配置</p></blockquote><h3 id="安装husky"><a href="#安装husky" class="headerlink" title="安装husky"></a>安装husky</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用下述命令会在根目录下自动生成.husky文件夹，并创建一个pre-commit钩子实例</span></span><br><span class="line">npx husky-init &amp;&amp; npm install       # npm</span><br><span class="line">npx husky-init &amp;&amp; yarn              # Yarn 1</span><br><span class="line">yarn dlx husky-init --yarn2 &amp;&amp; yarn # Yarn 2+</span><br><span class="line">pnpm dlx husky-init &amp;&amp; pnpm install # pnpm</span><br></pre></td></tr></table></figure><p>还可以使用如下方式安装husky：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install husky --save-dev #安装依赖</span><br><span class="line">npx --no-install husky install #创建.husky目录(使用--no-install的目的是让npx强制使用node_modules目录下的husky依赖包)</span><br><span class="line">npm pkg set scripts.prepare=&quot;husky install&quot; #在package.json中添加初始化命令(此步骤可以省略，但是如果是多人开发会很有必要，初始化仓库可以执行该命令)</span><br><span class="line">npx --no-instal husky add .husky/pre-commit &quot;npm run lint&quot; #快速创建pre-commit钩子</span><br></pre></td></tr></table></figure><p>添加commit-msg hook（该hook会在commitlint未通过时提示相关信息）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx husky add .husky/commit-msg  &#x27;npx --no -- commitlint --edit $&#123;1&#125;&#x27;</span><br></pre></td></tr></table></figure><p>如何判断上述步骤是否成功可以使用简单的test命令测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx commitlint --from HEAD~1 --to HEAD --verbose</span><br></pre></td></tr></table></figure><p>执行commit之后如果出现类似的信息即可认为配置成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;foo: this will fail&quot;</span><br><span class="line">husky &gt; commit-msg (node v10.1.0)</span><br><span class="line">No staged files match any of provided globs.</span><br><span class="line">⧗   input: foo: this will fail</span><br><span class="line">✖   type must be one of [build, chore, ci, docs, feat, fix, perf, refactor, revert, style, test] [type-enum]</span><br><span class="line"></span><br><span class="line">✖   found 1 problems, 0 warnings</span><br><span class="line">ⓘ   Get help: https://github.com/conventional-changelog/commitlint/#what-is-commitlint</span><br><span class="line"></span><br><span class="line">husky &gt; commit-msg hook failed (add --no-verify to bypass)</span><br></pre></td></tr></table></figure><h3 id="添加commitizen"><a href="#添加commitizen" class="headerlink" title="添加commitizen"></a>添加commitizen</h3><p>commitizen工具可以通过交互式撰写符合Commit Message规范的Commit Message</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install commitizen -D</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">or</span></span><br><span class="line">yarn add commitizen -D</span><br></pre></td></tr></table></figure><p>执行如下命令生成符合Angular的Commit message格式提交规范（使用其他规范可以跳过此步骤）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx --no-install commitizen init cz-conventional-changelog --save-dev --save-exact</span><br></pre></td></tr></table></figure><p>!!!若使用上述命令，需要在package.json中配置一下commitizen适配器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;commitizen&quot;</span>: &#123;</span><br><span class="line">      <span class="string">&quot;path&quot;</span>: <span class="string">&quot;./node_modules/cz-conventional-changelog&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外在package.json中的scripts中添加commit脚本替代git commit</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;cz&quot;</span>: <span class="string">&quot;git add . &amp;&amp; git-cz&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prepare&quot;</span>: <span class="string">&quot;husky install&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>执行完上述操作就可以使用脚本提交代码</p><h3 id="配置commitlint"><a href="#配置commitlint" class="headerlink" title="配置commitlint"></a>配置commitlint</h3><p>在根目录下新建文件.commitlintrc.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体配置可参考https://commitlint.js.org/#/reference-rules自行配置不做详细说明</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">ignores</span>: [<span class="function">(<span class="params">commit</span>) =&gt;</span> commit.<span class="title function_">includes</span>(<span class="string">&#x27;init&#x27;</span>)],</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>],</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;header-max-length&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>, <span class="number">72</span>],</span><br><span class="line">    <span class="string">&#x27;scope-case&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>, <span class="string">&#x27;lowerCase&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;subject-empty&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;subject-case&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>, [<span class="string">&#x27;lower-case&#x27;</span>, <span class="string">&#x27;sentence-case&#x27;</span>, <span class="string">&#x27;start-case&#x27;</span>, <span class="string">&#x27;pascal-case&#x27;</span>, <span class="string">&#x27;upper-case&#x27;</span>]],</span><br><span class="line">    <span class="string">&#x27;subject-full-stop&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>, <span class="string">&#x27;.&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;type-empty&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;never&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;type-case&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>, <span class="string">&#x27;lowerCase&#x27;</span>],</span><br><span class="line">    <span class="string">&#x27;type-enum&#x27;</span>: [<span class="number">2</span>, <span class="string">&#x27;always&#x27;</span>, [<span class="string">&#x27;feat&#x27;</span>, <span class="string">&#x27;fix&#x27;</span>, <span class="string">&#x27;docs&#x27;</span>, <span class="string">&#x27;style&#x27;</span>, <span class="string">&#x27;perf&#x27;</span>, <span class="string">&#x27;chore&#x27;</span>, <span class="string">&#x27;build&#x27;</span>]]</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="commitizen输出汉化"><a href="#commitizen输出汉化" class="headerlink" title="commitizen输出汉化"></a>commitizen输出汉化</h3><p>安装commitlint-config-cz插件配置commit message</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm install commitlint-config-cz -D #cz配置插件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">or</span></span><br><span class="line">yarn add commitlint-config-cz -D #cz配置插件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">and</span></span><br><span class="line">npm install cz-customizable -D #cz适配器插件</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">or</span></span><br><span class="line">yarn add cz-customizable -D #cz适配器插件</span><br></pre></td></tr></table></figure><p>在项目根目录下新建.cz-config.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置文件可参考https://github.com/leoforfree/cz-customizable/blob/HEAD/cz-config-EXAMPLE.js自行配置不做详细说明</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">types</span>: [</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;:sparkles: feat&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;✨ feat: 一项新功能&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;:bug: fix&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;🐛 fix: 修复一个Bug&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;:memo: docs&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;📝 docs: 文档变更&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;:lipstick: style&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;💄 style: 代码风格，格式修复&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;:zap: perf&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;⚡️ perf: 代码优化,改善性能&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;:rocket: chore&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;🚀 chore: 变更构建流程或辅助工具&#x27;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">value</span>: <span class="string">&#x27;:package: build&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;📦️ build: 变更项目构建或外部依赖&#x27;</span> &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">messages</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;请选择提交类型(必填):&#x27;</span>,</span><br><span class="line">    <span class="attr">subject</span>: <span class="string">&#x27;请简要描述提交(必填):&#x27;</span>,</span><br><span class="line">    <span class="attr">confirmCommit</span>: <span class="string">&#x27;确定提交此说明吗？&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">skipQuestions</span>: [<span class="string">&#x27;scope&#x27;</span>, <span class="string">&#x27;body&#x27;</span>, <span class="string">&#x27;breaking&#x27;</span>, <span class="string">&#x27;footer&#x27;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建完.cz-config.js </p><ul><li>返回package.json修改commitizen适配器选项<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">&quot;config&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;commitizen&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;path&quot;</span>: <span class="string">&quot;node_modules/cz-customizable&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li>若之前使用Angular的Commit message格式提交规范，需修改.commitlintrc.js文件，节约空间可以卸载掉@commitlint/config-conventional插件（用不上了）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">extends</span>: [],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="集成-gitmoji"><a href="#集成-gitmoji" class="headerlink" title="集成 gitmoji"></a>集成 gitmoji</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install commitlint-config-gitmoji -D</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">or</span></span><br><span class="line">yarn add commitlint-config-gitmoji -D</span><br></pre></td></tr></table></figure>修改.commitlintrc.js<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;gitmoji&#x27;</span>],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>使用gitmoji的时候可能会遇到如下问题：</li></ul><ol><li>报错找不到gitmojis.json 两种解决方案：<pre><code>在node_modules/commitlint-plugin-gitmoji/lib下添加gitmojis.json</code></pre> 在根目录下添加gitmojis.json并修改.cz-config.js</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    process.<span class="property">env</span>.<span class="property">GITMOJI_PATH</span> = <span class="string">&#x27;.gitmoji.json&#x27;</span></span><br><span class="line">    modules.<span class="property">exports</span>=&#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2. 偶遇校验不通过需要严格按照上述事例配置.commitlintrc.js（列出来的rule勿改）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 安装lint-stage</span></span><br><span class="line"><span class="string">文件过滤器，每次只校验commit的文件</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>shell</span><br><span class="line">npm install lint-staged -D</span><br><span class="line">#or</span><br><span class="line">yarn add lint-stage -D</span><br></pre></td></tr></table></figure><p>修改.husky/pre-commit</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!<span class="regexp">/usr/</span>bin/env sh</span><br><span class="line">. <span class="string">&quot;$(dirname -- &quot;</span>$<span class="number">0</span><span class="string">&quot;)/_/husky.sh&quot;</span></span><br><span class="line"></span><br><span class="line">npx lint-staged</span><br></pre></td></tr></table></figure><p>修改package.json</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 具体使用可参考lint-stage介绍：https://github.com/okonet/lint-staged#readme</span></span><br><span class="line">...</span><br><span class="line"><span class="string">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;*.&#123;js,jsx,ts,tsx&#125;&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;eslint --fix&quot;</span>, <span class="comment">//eslint校验</span></span><br><span class="line">    <span class="string">&quot;prettier --write&quot;</span> <span class="comment">//prettier格式化</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">&quot;*.vue&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;eslint --fix&quot;</span>,</span><br><span class="line">    <span class="string">&quot;prettier --write&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>有关eslint及prettier的问题可以参见上篇文章。<a href="https://ovyvo.github.io/yanblog.github.io/2022/10/28/blog8/">vite+vue3代码风格校验及格式化</a></p><p>以上就是本文全部内容，由于项目成本关系没有引入其他工具，像文件校验，commit-log自动添加，stylelint等，有兴趣的朋友可以自行尝试。</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><p><a href="https://download.csdn.net/download/V_AYA_V/86725149?spm=1001.2014.3001.5503">gitmojis.json文件地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;紧接上文说到vite+vue3代码风格及格式化操作，前文主要针对本地化配置格式化。为了更加规范仓库代码，本文引入介绍commitlint等工具，在代码commit的时候再次校验为代码规范再上一层保障。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 i</summary>
      
    
    
    
    <category term="工具" scheme="https://ovyvo.github.io/yanblog.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="代码规范" scheme="https://ovyvo.github.io/yanblog.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>prettier+eslint+commitlint项目实践</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2022/10/28/blog8/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2022/10/28/blog8/</id>
    <published>2022-10-28T00:00:00.000Z</published>
    <updated>2022-11-27T04:13:15.827Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>团队代码风格统一一直是博主想干又没有时间去干的事情，刚好借着新项目搭建，尝试一下使用Eslint及Prettier工具提升一下项目代码的整体质量。本文在配置方面仅做简单的配置，流程熟悉可以参考Eslint及Prettier官方文档定制自己喜欢的标准。</p></blockquote><h3 id="安装Eslint包"><a href="#安装Eslint包" class="headerlink" title="安装Eslint包"></a>安装Eslint包</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint <span class="literal">-D</span></span><br></pre></td></tr></table></figure><h3 id="初始化Eslint"><a href="#初始化Eslint" class="headerlink" title="初始化Eslint"></a>初始化Eslint</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init @eslint/config</span><br></pre></td></tr></table></figure><p>执行命令后会出现以下选项：（可以按照图片配置，也可以后面直接更改.eslintrc.cjs文件）<br><img src="https://img-blog.csdnimg.cn/d9d106e8d2724340b5e4c5b7dd63cf9e.png" alt="init详情"><br>具体配置可以以自己项目为准，博主这里使用的是vite+vue3+js<br>安装完成之后项目的根目录会出现.eslintrc.cjs文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;browser&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;es2021&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&quot;node&quot;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;eslint:recommended&quot;</span>,</span><br><span class="line">        <span class="string">&quot;plugin:vue/vue3-essential&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;overrides&quot;</span>: [</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ecmaVersion&quot;</span>: <span class="string">&quot;latest&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;plugins&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;vue&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="安装vite-plugin-eslint包"><a href="#安装vite-plugin-eslint包" class="headerlink" title="安装vite-plugin-eslint包"></a>安装vite-plugin-eslint包</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 该包的作用是在vite运行时自动检测eslint规范，根据配置在终端显示未通过的校验代码</span><br><span class="line">npm install vite<span class="literal">-plugin-eslint</span> <span class="literal">-D</span></span><br></pre></td></tr></table></figure><h3 id="安装eslint-parser-及-babel-core-包"><a href="#安装eslint-parser-及-babel-core-包" class="headerlink" title="安装eslint-parser 及 @babel/core 包"></a>安装eslint-parser 及 @babel/core 包</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 该包的作用是允许eslint在babel转换的源代码上运行</span><br><span class="line">npm install @babel/eslint<span class="literal">-parser</span> <span class="literal">-D</span></span><br><span class="line">npm install @babel/core <span class="literal">-D</span></span><br></pre></td></tr></table></figure><h3 id="安装prettier相关包"><a href="#安装prettier相关包" class="headerlink" title="安装prettier相关包"></a>安装prettier相关包</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install prettier <span class="literal">-D</span></span><br><span class="line">npm install eslint<span class="literal">-config-prettier</span> <span class="literal">-D</span> // eslint兼容的插件,将关闭eslint所有不必要或可能与Prettier冲突的规则</span><br><span class="line">npm install eslint<span class="literal">-plugin-prettier</span> <span class="literal">-D</span> // eslint的prettier,将Prettier作为ESLint规则运行，并将差异作为单个ESLint问题报告。</span><br></pre></td></tr></table></figure><h3 id="安装vue-eslint-parser包"><a href="#安装vue-eslint-parser包" class="headerlink" title="安装vue-eslint-parser包"></a>安装vue-eslint-parser包</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 用于`.vue`文件的ESLint自定义解析器。</span><br><span class="line">npm install vue<span class="literal">-eslint-parser</span> <span class="literal">-D</span></span><br></pre></td></tr></table></figure><h3 id="配置-prettierrc"><a href="#配置-prettierrc" class="headerlink" title="配置.prettierrc"></a>配置.prettierrc</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .prettierrc, 配置不做过多说明，具体可查阅相关文档</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;printWidth&quot;</span>: <span class="number">120</span>,</span><br><span class="line">  <span class="string">&quot;tabWidth&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">&quot;useTabs&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;semi&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;trailingComma&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">  <span class="string">&quot;singleQuote&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;bracketSpacing&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;jsxBracketSameLine&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;endOfLine&quot;</span>: <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">  <span class="string">&quot;arrowParens&quot;</span>: <span class="string">&quot;avoid&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置-eslintrc-cjs"><a href="#配置-eslintrc-cjs" class="headerlink" title="配置.eslintrc.cjs"></a>配置.eslintrc.cjs</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">es2021</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;eslint:recommended&#x27;</span>, <span class="comment">// eslint核心规则</span></span><br><span class="line">    <span class="string">&#x27;plugin:vue/vue3-essential&#x27;</span>, <span class="comment">// 继承eslint-plugin-vue组件中的基础配置</span></span><br><span class="line">    <span class="string">&#x27;plugin:prettier/recommended&#x27;</span>, <span class="comment">// 继承eslint-plugin-prettier组件中的基础配置</span></span><br><span class="line">    <span class="string">&#x27;eslint-config-prettier&#x27;</span> <span class="comment">// 处理配置兼容问题</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&#x27;vue-eslint-parser&#x27;</span>, <span class="comment">// 使用vue解析器</span></span><br><span class="line">  <span class="attr">parserOptions</span>: &#123; <span class="comment">// 设置支持的JavaScript语言选项</span></span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="string">&#x27;latest&#x27;</span>, <span class="comment">// 指定EcmaScript的版本</span></span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&#x27;module&#x27;</span>, <span class="comment">// script/module</span></span><br><span class="line">    <span class="attr">ecmaFeatures</span>: &#123;</span><br><span class="line">      <span class="attr">jsx</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>:[</span><br><span class="line">  <span class="string">&#x27;vue&#x27;</span>, <span class="comment">// eslint-plugin-vue缩写</span></span><br><span class="line">  <span class="string">&#x27;prettier&#x27;</span> <span class="comment">// eslint-plugin-prettier缩写</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">globals</span>: &#123;</span><br><span class="line">  <span class="comment">// 添加全局变量，防止no-undef 规则发出警告</span></span><br><span class="line">    <span class="attr">defineProps</span>: <span class="string">&#x27;readonly&#x27;</span>,</span><br><span class="line">    <span class="attr">defineEmits</span>: <span class="string">&#x27;readonly&#x27;</span>,</span><br><span class="line">    <span class="attr">defineExpose</span>: <span class="string">&#x27;readonly&#x27;</span>,</span><br><span class="line">    <span class="attr">withDefaults</span>: <span class="string">&#x27;readonly&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;no-console&#x27;</span>: <span class="string">&#x27;warn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;vue/multi-word-component-names&#x27;</span>: <span class="string">&#x27;off&#x27;</span> <span class="comment">// extends中继承过来的属性，可以重新修改</span></span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="VSCode配置"><a href="#VSCode配置" class="headerlink" title="VSCode配置"></a>VSCode配置</h3><p>安装ESLint及Prettier插件<br><img src="https://img-blog.csdnimg.cn/4690e67f62214702b6661568c0861a34.png" alt="Eslint插件"><br><img src="https://img-blog.csdnimg.cn/bce24e7cf92543f6b7a9552221ccb58c.png" alt="Prettier插件"></p><ol><li>打开VSCode设置&gt;用户&gt;文本编辑器&gt;格式化&gt;勾选Format On Save</li></ol><p><img src="https://img-blog.csdnimg.cn/6b72652fe60d4251b7b213b4ab0b4175.png" alt="配置保存自动格式化"><br>2. 搜索Prettier&gt;勾选Require Config<br><img src="https://img-blog.csdnimg.cn/fb501a9997c947f2b4a2b5be516add31.png" alt="配置方案文件"><br>3.打开VSCode设置&gt;用户&gt;文本编辑器&gt;Default Formatter&gt;选择Prettier - Code formatter<br><img src="https://img-blog.csdnimg.cn/4a56242e17a443fdad906b636403427a.png" alt="配置默认格式化程序"><br>4.ctr+shift+p打开首选项配置settings.json&gt;添加eslint vue支持</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">&quot;eslint.validate&quot;</span>: [</span><br><span class="line">  <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">   <span class="string">&quot;javascriptreact&quot;</span>,</span><br><span class="line">   <span class="string">&quot;vue&quot;</span></span><br><span class="line"> ],</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>特别提醒：每次修改完Eslint及Prettier配置最好重新启动VSCode，防止出现配置不生效的情况</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;团队代码风格统一一直是博主想干又没有时间去干的事情，刚好借着新项目搭建，尝试一下使用Eslint及Prettier工具提升一下项目代码的整体质量。本文在配置方面仅做简单的配置，流程熟悉可以参考Eslint及Prettier官方文档定制自己喜欢的标准</summary>
      
    
    
    
    <category term="工具" scheme="https://ovyvo.github.io/yanblog.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="代码规范" scheme="https://ovyvo.github.io/yanblog.github.io/tags/%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Element组件MessageBox剖析</title>
    <link href="https://ovyvo.github.io/yanblog.github.io/2022/10/10/blog7/"/>
    <id>https://ovyvo.github.io/yanblog.github.io/2022/10/10/blog7/</id>
    <published>2022-10-10T00:00:00.000Z</published>
    <updated>2022-10-10T11:00:56.172Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>因最近业务需求需要实现类似于Element中的MessageBox组件的效果，所以尝试封装了一个类似的小组件，本文不介绍封装，因为受到MessageBox的启发，所以通过源码注释的方式详细剖析一下Element的MessageBox实现思想。</p></blockquote><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><p>Vue.extend(options)</p><ul><li>参数：{Object} options</li><li>用法：使用基础 Vue 构造器，创建一个“子类”。参数是一个包含组件选项的对象。需要注意的是：data 选项是特例，需要注意 - 在 Vue.extend() 中它必须是函数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mount-point&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建构造器</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Profile</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&#x27;&lt;p&gt;&#123;&#123;firstName&#125;&#125; &#123;&#123;lastName&#125;&#125; aka &#123;&#123;alias&#125;&#125;&lt;/p&gt;&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">firstName</span>: <span class="string">&#x27;Walter&#x27;</span>,</span><br><span class="line">      <span class="attr">lastName</span>: <span class="string">&#x27;White&#x27;</span>,</span><br><span class="line">      <span class="attr">alias</span>: <span class="string">&#x27;Heisenberg&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建 Profile 实例，并挂载到一个元素上。</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Profile</span>().$mount(<span class="string">&#x27;#mount-point&#x27;</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Walter White aka Heisenberg<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>为什么要介绍Vue.extend(options)，因为Element中MessageBox的使用方式为函数式调用 （this.$confirm()）的形式，以这种形式调用组件就不能按照常规的组件引入注册的形式去调用，可以通过Vue.extend(options)创建一个vue子类再通过函数暴露出去的方式实现函数式调用。</p></blockquote><h3 id="Element-MessageBox-源码"><a href="#Element-MessageBox-源码" class="headerlink" title="Element MessageBox 源码"></a>Element MessageBox 源码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js 仅介绍主要部分代码</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="comment">// 引入模板文件</span></span><br><span class="line"><span class="keyword">import</span> msgboxVue <span class="keyword">from</span> <span class="string">&#x27;./main.vue&#x27;</span>; </span><br><span class="line"><span class="comment">// element合并对象的工具函数，代码比较简单可以自行查阅</span></span><br><span class="line"><span class="keyword">import</span> merge <span class="keyword">from</span> <span class="string">&#x27;element-ui/src/utils/merge&#x27;</span>; </span><br><span class="line"><span class="keyword">import</span> &#123; isVNode &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui/src/utils/vdom&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的vue构造器，构造器可以手动挂载到一个新的Dom上</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MessageBoxConstructor</span> = <span class="title class_">Vue</span>.<span class="title function_">extend</span>(msgboxVue);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> currentMsg, instance;</span><br><span class="line"><span class="keyword">let</span> msgQueue = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的vue子实例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">initInstance</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  instance = <span class="keyword">new</span> <span class="title class_">MessageBoxConstructor</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>: <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>)</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 给实例添加callback对象，后面会分析到</span></span><br><span class="line">  instance.<span class="property">callback</span> = defaultCallback;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// defaultCallback处理了两种形式的回调方式</span></span><br><span class="line"><span class="comment">// 1.可以手动传入一个callback函数</span></span><br><span class="line"><span class="comment">// 2.使用默认的promise方式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">defaultCallback</span> = action =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (currentMsg) &#123;</span><br><span class="line">    <span class="keyword">let</span> callback = currentMsg.<span class="property">callback</span>;</span><br><span class="line">    <span class="comment">// 处理传入回调函数情况</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="comment">// showInput区分是否为输入框MessageBox</span></span><br><span class="line">      <span class="keyword">if</span> (instance.<span class="property">showInput</span>) &#123;</span><br><span class="line">        <span class="title function_">callback</span>(instance.<span class="property">inputValue</span>, action);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">callback</span>(action, instance);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 处理promise情况</span></span><br><span class="line">    <span class="keyword">if</span> (currentMsg.<span class="property">resolve</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (action === <span class="string">&#x27;confirm&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance.<span class="property">showInput</span>) &#123;</span><br><span class="line">          currentMsg.<span class="title function_">resolve</span>(&#123; <span class="attr">value</span>: instance.<span class="property">inputValue</span>, action &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          currentMsg.<span class="title function_">resolve</span>(action);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currentMsg.<span class="property">reject</span> &amp;&amp; (action === <span class="string">&#x27;cancel&#x27;</span> || action === <span class="string">&#x27;close&#x27;</span>)) &#123;</span><br><span class="line">        currentMsg.<span class="title function_">reject</span>(action);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">showNextMsg</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">    <span class="title function_">initInstance</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  instance.<span class="property">action</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!instance.<span class="property">visible</span> || instance.<span class="property">closeTimer</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (msgQueue.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// 顺序执行msgQueue中的currentMsg</span></span><br><span class="line">      currentMsg = msgQueue.<span class="title function_">shift</span>();</span><br><span class="line">      <span class="comment">// currentMsg内容如下:</span></span><br><span class="line">      <span class="comment">// &#123;</span></span><br><span class="line">      <span class="comment">//   options: merge(&#123;&#125;, defaults, MessageBox.defaults, options),</span></span><br><span class="line">      <span class="comment">//   callback: callback,</span></span><br><span class="line">      <span class="comment">//   resolve: resolve,</span></span><br><span class="line">      <span class="comment">//   reject: reject</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">      <span class="keyword">let</span> options = currentMsg.<span class="property">options</span>;</span><br><span class="line">      <span class="comment">// 将参数挂载到新创建的实例data上</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> prop <span class="keyword">in</span> options) &#123;</span><br><span class="line">        <span class="keyword">if</span> (options.<span class="title function_">hasOwnProperty</span>(prop)) &#123;</span><br><span class="line">          <span class="comment">// 实例参数修改</span></span><br><span class="line">          instance[prop] = options[prop];</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 如果options没传入callback将默认的callback赋值给实例的callback</span></span><br><span class="line">      <span class="keyword">if</span> (options.<span class="property">callback</span> === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="comment">// 当options里面有callback传入，正常输出。</span></span><br><span class="line">        <span class="comment">// 当options里面没有callback,instance.callback使用defaultCallback</span></span><br><span class="line">        instance.<span class="property">callback</span> = defaultCallback;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 再次封装callback</span></span><br><span class="line">      <span class="keyword">let</span> oldCb = instance.<span class="property">callback</span>;</span><br><span class="line">      instance.<span class="property">callback</span> = <span class="function">(<span class="params">action, instance</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">oldCb</span>(action, instance);</span><br><span class="line">        <span class="title function_">showNextMsg</span>();</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 判断message是否传入的是Html片段,如果是Html片段添加到slot</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">isVNode</span>(instance.<span class="property">message</span>)) &#123;</span><br><span class="line">        instance.<span class="property">$slots</span>.<span class="property">default</span> = [instance.<span class="property">message</span>];</span><br><span class="line">        instance.<span class="property">message</span> = <span class="literal">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">delete</span> instance.<span class="property">$slots</span>.<span class="property">default</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 将某些特定的参数设定初始值</span></span><br><span class="line">      [<span class="string">&#x27;modal&#x27;</span>, <span class="string">&#x27;showClose&#x27;</span>, <span class="string">&#x27;closeOnClickModal&#x27;</span>, <span class="string">&#x27;closeOnPressEscape&#x27;</span>, <span class="string">&#x27;closeOnHashChange&#x27;</span>].<span class="title function_">forEach</span>(<span class="function"><span class="params">prop</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance[prop] === <span class="literal">undefined</span>) &#123;</span><br><span class="line">          instance[prop] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 注意message是挂载到body上</span></span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(instance.<span class="property">$el</span>);</span><br><span class="line">      <span class="comment">// 控制弹窗出现</span></span><br><span class="line">      <span class="title class_">Vue</span>.<span class="title function_">nextTick</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        instance.<span class="property">visible</span> = <span class="literal">true</span>;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MessageBox</span> = <span class="keyword">function</span>(<span class="params">options, callback</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$isServer</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">&#x27;string&#x27;</span> || <span class="title function_">isVNode</span>(options)) &#123;</span><br><span class="line">    <span class="comment">// 当options参数为字符串 this.$msgbox(&#x27;xxx&#x27;)情况下默认设置message字段</span></span><br><span class="line">    options = &#123;</span><br><span class="line">      <span class="attr">message</span>: options</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 若有两个及以上参数判断第二个参数是否为字符串赋值给title</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">arguments</span>[<span class="number">1</span>] === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">      options.<span class="property">title</span> = <span class="variable language_">arguments</span>[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (options.<span class="property">callback</span> &amp;&amp; !callback) &#123;</span><br><span class="line">    <span class="comment">// 参数为对象且对象有callback字段时 将callback赋值给callback</span></span><br><span class="line">    callback = options.<span class="property">callback</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 兼容不支持Promise情况</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">Promise</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123; <span class="comment">// eslint-disable-line</span></span><br><span class="line">      msgQueue.<span class="title function_">push</span>(&#123;</span><br><span class="line">        <span class="attr">options</span>: <span class="title function_">merge</span>(&#123;&#125;, defaults, <span class="title class_">MessageBox</span>.<span class="property">defaults</span>, options),</span><br><span class="line">        <span class="attr">callback</span>: callback,</span><br><span class="line">        <span class="attr">resolve</span>: resolve,</span><br><span class="line">        <span class="attr">reject</span>: reject</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="title function_">showNextMsg</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    msgQueue.<span class="title function_">push</span>(&#123;</span><br><span class="line">      <span class="attr">options</span>: <span class="title function_">merge</span>(&#123;&#125;, defaults, <span class="title class_">MessageBox</span>.<span class="property">defaults</span>, options),</span><br><span class="line">      <span class="attr">callback</span>: callback</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">showNextMsg</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用方式1:</span></span><br><span class="line">  <span class="comment">// this.$msgbox(&#123;title:&#x27;测试&#x27;,message:&#x27;测试&#x27;,callback:(action,instance)=&gt;&#123;</span></span><br><span class="line">  <span class="comment">//   console.log(action) //confirm</span></span><br><span class="line">  <span class="comment">//   console.log(instance) //vue实例</span></span><br><span class="line">  <span class="comment">// &#125;&#125;)</span></span><br><span class="line">  <span class="comment">// 使用方式2:</span></span><br><span class="line">  <span class="comment">// this.$msgbox(&#123;title:&#x27;测试&#x27;,message:&#x27;测试&#x27;&#125;,(action,instance)=&gt;&#123;</span></span><br><span class="line">  <span class="comment">//   console.log(action) //confirm</span></span><br><span class="line">  <span class="comment">//   console.log(instance) //undefined</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露MessageBox方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">MessageBox</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; <span class="title class_">MessageBox</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>可以看出Message组件主要的两个方法一个是MessageBox，一个是showNextMsg，这两个方法的主要功能一个是添加新的message对象一个是设置实例参数，除了callback的理解有些复杂外其他的代码理解应该不难。至于main.vue文件就是普通的vue文件不再赘述。</p></blockquote><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><p><a href="https://ovyvo.github.io/rocket-ui/components/message-box.html">MessageBox组件</a><br><a href="https://github.com/OVYVO/rocket-ui/tree/main/packages/message-box/src">源码</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;因最近业务需求需要实现类似于Element中的MessageBox组件的效果，所以尝试封装了一个类似的小组件，本文不介绍封装，因为受到MessageBox的启发，所以通过源码注释的方式详细剖析一下Element的MessageBox实现思想。&lt;/p</summary>
      
    
    
    
    <category term="组件" scheme="https://ovyvo.github.io/yanblog.github.io/categories/%E7%BB%84%E4%BB%B6/"/>
    
    
    <category term="Element" scheme="https://ovyvo.github.io/yanblog.github.io/tags/Element/"/>
    
  </entry>
  
</feed>
